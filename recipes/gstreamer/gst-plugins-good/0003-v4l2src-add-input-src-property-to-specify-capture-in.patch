From 2b523c13c8b0ad08cf3922f34d8cf72b055596dc Mon Sep 17 00:00:00 2001
From: Don Darling <don.osc2@gmail.com>
Date: Thu, 15 Apr 2010 16:07:29 -0500
Subject: [PATCH 03/14] v4l2src: add input-src property to specify capture input

This property specifies which capture input to use when multiple inputs
are present on a capture device.
---
 sys/v4l2/gstv4l2object.c |    4 ++++
 sys/v4l2/gstv4l2object.h |    1 +
 sys/v4l2/gstv4l2src.c    |   14 +++++++++++++-
 sys/v4l2/v4l2_calls.c    |   26 ++++++++++++++++++++++++++
 4 files changed, 44 insertions(+), 1 deletions(-)

diff --git a/sys/v4l2/gstv4l2object.c b/sys/v4l2/gstv4l2object.c
index f94236c..6e38fbc 100644
--- a/sys/v4l2/gstv4l2object.c
+++ b/sys/v4l2/gstv4l2object.c
@@ -389,6 +389,10 @@ gst_v4l2_object_destroy (GstV4l2Object * v4l2object)
     gst_v4l2_object_clear_format_list (v4l2object);
   }
 
+  if (v4l2object->input_src) {
+    g_free (v4l2object->input_src);
+  }
+
   g_free (v4l2object);
 }
 
diff --git a/sys/v4l2/gstv4l2object.h b/sys/v4l2/gstv4l2object.h
index 4aac3a5..81669b9 100644
--- a/sys/v4l2/gstv4l2object.h
+++ b/sys/v4l2/gstv4l2object.h
@@ -109,6 +109,7 @@ struct _GstV4l2Object {
   gchar *norm;
   gchar *channel;
   gulong frequency;
+  gchar *input_src;
 
   /* X-overlay */
   GstV4l2Xv *xv;
diff --git a/sys/v4l2/gstv4l2src.c b/sys/v4l2/gstv4l2src.c
index 463bef3..0b0e62c 100644
--- a/sys/v4l2/gstv4l2src.c
+++ b/sys/v4l2/gstv4l2src.c
@@ -79,7 +79,8 @@ enum
   PROP_0,
   V4L2_STD_OBJECT_PROPS,
   PROP_QUEUE_SIZE,
-  PROP_ALWAYS_COPY
+  PROP_ALWAYS_COPY,
+  PROP_INPUT_SRC
 };
 
 GST_IMPLEMENT_V4L2_PROBE_METHODS (GstV4l2SrcClass, gst_v4l2src);
@@ -252,6 +253,9 @@ gst_v4l2src_class_init (GstV4l2SrcClass * klass)
       g_param_spec_boolean ("always-copy", "Always Copy",
           "If the buffer will or not be used directly from mmap",
           PROP_DEF_ALWAYS_COPY, G_PARAM_READWRITE));
+  g_object_class_install_property (gobject_class, PROP_INPUT_SRC,
+      g_param_spec_string ("input-src", "Select the input source",
+          "Select the input source)", NULL, G_PARAM_READWRITE));
 
   basesrc_class->get_caps = GST_DEBUG_FUNCPTR (gst_v4l2src_get_caps);
   basesrc_class->set_caps = GST_DEBUG_FUNCPTR (gst_v4l2src_set_caps);
@@ -280,6 +284,7 @@ gst_v4l2src_init (GstV4l2Src * v4l2src, GstV4l2SrcClass * klass)
   v4l2src->always_copy = PROP_DEF_ALWAYS_COPY;
 
   v4l2src->is_capturing = FALSE;
+  v4l2src->v4l2object->input_src = NULL;
 
   gst_base_src_set_format (GST_BASE_SRC (v4l2src), GST_FORMAT_TIME);
   gst_base_src_set_live (GST_BASE_SRC (v4l2src), TRUE);
@@ -326,6 +331,10 @@ gst_v4l2src_set_property (GObject * object,
       case PROP_ALWAYS_COPY:
         v4l2src->always_copy = g_value_get_boolean (value);
         break;
+      case PROP_INPUT_SRC:
+        v4l2src->v4l2object->input_src =
+          g_ascii_strup(g_value_get_string(value), -1);
+        break;
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
@@ -349,6 +358,9 @@ gst_v4l2src_get_property (GObject * object,
       case PROP_ALWAYS_COPY:
         g_value_set_boolean (value, v4l2src->always_copy);
         break;
+      case PROP_INPUT_SRC:
+        g_value_set_string(value, v4l2src->v4l2object->input_src);
+        break;
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
diff --git a/sys/v4l2/v4l2_calls.c b/sys/v4l2/v4l2_calls.c
index 5f6261e..b98bae7 100644
--- a/sys/v4l2/v4l2_calls.c
+++ b/sys/v4l2/v4l2_calls.c
@@ -111,6 +111,8 @@ gst_v4l2_fill_lists (GstV4l2Object * v4l2object)
 {
   gint n;
 
+  gboolean input_src_found = FALSE;
+
   GstElement *e;
 
   e = v4l2object->element;
@@ -125,6 +127,9 @@ gst_v4l2_fill_lists (GstV4l2Object * v4l2object)
     GstV4l2TunerChannel *v4l2channel;
     GstTunerChannel *channel;
 
+    if (input_src_found)
+      break;
+
     memset (&input, 0, sizeof (input));
 
     input.index = n;
@@ -141,6 +146,21 @@ gst_v4l2_fill_lists (GstV4l2Object * v4l2object)
       }
     }
 
+    /* If the input-src property was used, record the corresponding input */
+    if (v4l2object->input_src) {
+      gchar    *input_name  = g_ascii_strup((gchar*)input.name, -1);
+      gboolean  input_match;
+
+      input_match = (strcmp(input_name, v4l2object->input_src) == 0);
+
+      g_free(input_name);
+
+      if (input_match) 
+         input_src_found = TRUE;
+      else
+         continue;
+    }
+
     GST_LOG_OBJECT (e, "   index:     %d", input.index);
     GST_LOG_OBJECT (e, "   name:      '%s'", input.name);
     GST_LOG_OBJECT (e, "   type:      %08x", input.type);
@@ -375,6 +395,12 @@ gst_v4l2_fill_lists (GstV4l2Object * v4l2object)
   }
   v4l2object->colors = g_list_reverse (v4l2object->colors);
 
+  if (v4l2object->input_src && !input_src_found) {
+    GST_ELEMENT_ERROR (v4l2object->element, RESOURCE, NOT_FOUND,
+        (_("Specified input-src '%s' was not found."),
+            v4l2object->input_src), NULL);
+  }
+
   GST_DEBUG_OBJECT (e, "done");
   return TRUE;
 }
-- 
1.6.3.3

