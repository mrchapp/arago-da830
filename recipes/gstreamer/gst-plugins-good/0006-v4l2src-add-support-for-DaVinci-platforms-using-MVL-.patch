From 234926e586ddd9bee2415574e6bf58b16970d556 Mon Sep 17 00:00:00 2001
From: Don Darling <don.osc2@gmail.com>
Date: Mon, 12 Apr 2010 13:07:24 -0500
Subject: [PATCH 06/14] v4l2src: add support for DaVinci platforms using MVL-based kernels

The following files add support for device-specific hand-shaking with the
capture drivers for DaVinci platforms that use MontaVista-based Linux kernels:

    v4l2src_mvl_lsp.h
    v4l2src_mvl_lsp.c

Since these capture drivers use some custom ioctls that would never be pushed
to the upstream Linux kernel tree, it follows that changes to the v4l2src
element to support these ioctls would never be pushed either.  That said,
our goal here is to isolate these changes into their own file and change the
upstream code base as little as possible.  Since we may need to carry these
patches for several revisions of v4l2src, this will make re-basing easier.

All changes to the upstream code are guarded by "#if defined(MVL_LSP)", which
is defined by the TI GStreamer build system where appropriate.
---
 sys/v4l2/Makefile.am         |    4 +-
 sys/v4l2/Makefile.in         |   10 ++
 sys/v4l2/gstv4l2bufferpool.c |    4 +
 sys/v4l2/gstv4l2bufferpool.h |    3 +
 sys/v4l2/gstv4l2object.c     |   39 +++++++-
 sys/v4l2/gstv4l2object.h     |    8 ++
 sys/v4l2/gstv4l2src.c        |   26 +++++
 sys/v4l2/v4l2_calls.c        |    4 +
 sys/v4l2/v4l2src_calls.c     |   14 +++
 sys/v4l2/v4l2src_mvl_lsp.c   |  234 ++++++++++++++++++++++++++++++++++++++++++
 sys/v4l2/v4l2src_mvl_lsp.h   |   52 +++++++++
 11 files changed, 396 insertions(+), 2 deletions(-)
 create mode 100644 sys/v4l2/v4l2src_mvl_lsp.c
 create mode 100644 sys/v4l2/v4l2src_mvl_lsp.h

diff --git a/sys/v4l2/Makefile.am b/sys/v4l2/Makefile.am
index e655bcb..0c0e086 100644
--- a/sys/v4l2/Makefile.am
+++ b/sys/v4l2/Makefile.am
@@ -19,6 +19,7 @@ libgstvideo4linux2_la_SOURCES = gstv4l2.c \
 				gstv4l2vidorient.c \
 				v4l2_calls.c \
 				v4l2src_calls.c \
+				v4l2src_mvl_lsp.c \
 				$(xv_source)
 
 libgstvideo4linux2_la_CFLAGS =   $(GST_PLUGINS_BASE_CFLAGS) \
@@ -50,4 +51,5 @@ noinst_HEADERS = \
 	gstv4l2vidorient.h \
 	gstv4l2xoverlay.h \
 	v4l2_calls.h \
-	v4l2src_calls.h
+	v4l2src_calls.h \
+	v4l2src_mvl_lsp.h
diff --git a/sys/v4l2/Makefile.in b/sys/v4l2/Makefile.in
index 2663df8..dea048f 100644
--- a/sys/v4l2/Makefile.in
+++ b/sys/v4l2/Makefile.in
@@ -100,6 +100,7 @@ am_libgstvideo4linux2_la_OBJECTS = libgstvideo4linux2_la-gstv4l2.lo \
 	libgstvideo4linux2_la-gstv4l2tuner.lo \
 	libgstvideo4linux2_la-gstv4l2vidorient.lo \
 	libgstvideo4linux2_la-v4l2_calls.lo \
+	libgstvideo4linux2_la-v4l2src_mvl_lsp.lo \
 	libgstvideo4linux2_la-v4l2src_calls.lo
 libgstvideo4linux2_la_OBJECTS = $(am_libgstvideo4linux2_la_OBJECTS)
 libgstvideo4linux2_la_LINK = $(LIBTOOL) --tag=CC \
@@ -457,6 +458,7 @@ libgstvideo4linux2_la_SOURCES = gstv4l2.c \
 				gstv4l2tuner.c \
 				gstv4l2vidorient.c \
 				v4l2_calls.c \
+				v4l2src_mvl_lsp.c \
 				v4l2src_calls.c \
 				$(xv_source)
 
@@ -488,6 +490,7 @@ noinst_HEADERS = \
 	gstv4l2vidorient.h \
 	gstv4l2xoverlay.h \
 	v4l2_calls.h \
+	v4l2src_mvl_lsp.h \
 	v4l2src_calls.h
 
 all: all-am
@@ -654,6 +657,13 @@ libgstvideo4linux2_la-v4l2_calls.lo: v4l2_calls.c
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(LIBTOOL) --tag=CC $(libgstvideo4linux2_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgstvideo4linux2_la_CFLAGS) $(CFLAGS) -c -o libgstvideo4linux2_la-v4l2_calls.lo `test -f 'v4l2_calls.c' || echo '$(srcdir)/'`v4l2_calls.c
 
+libgstvideo4linux2_la-v4l2src_mvl_lsp.lo: v4l2src_mvl_lsp.c
+@am__fastdepCC_TRUE@	$(LIBTOOL) --tag=CC $(libgstvideo4linux2_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgstvideo4linux2_la_CFLAGS) $(CFLAGS) -MT libgstvideo4linux2_la-v4l2src_mvl_lsp.lo -MD -MP -MF $(DEPDIR)/libgstvideo4linux2_la-v4l2src_mvl_lsp.Tpo -c -o libgstvideo4linux2_la-v4l2src_mvl_lsp.lo `test -f 'v4l2src_mvl_lsp.c' || echo '$(srcdir)/'`v4l2src_mvl_lsp.c
+@am__fastdepCC_TRUE@	mv -f $(DEPDIR)/libgstvideo4linux2_la-v4l2src_mvl_lsp.Tpo $(DEPDIR)/libgstvideo4linux2_la-v4l2src_mvl_lsp.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='v4l2src_mvl_lsp.c' object='libgstvideo4linux2_la-v4l2src_mvl_lsp.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(LIBTOOL) --tag=CC $(libgstvideo4linux2_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgstvideo4linux2_la_CFLAGS) $(CFLAGS) -c -o libgstvideo4linux2_la-v4l2src_mvl_lsp.lo `test -f 'v4l2src_mvl_lsp.c' || echo '$(srcdir)/'`v4l2src_mvl_lsp.c
+
 libgstvideo4linux2_la-v4l2src_calls.lo: v4l2src_calls.c
 @am__fastdepCC_TRUE@	$(LIBTOOL) --tag=CC $(libgstvideo4linux2_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgstvideo4linux2_la_CFLAGS) $(CFLAGS) -MT libgstvideo4linux2_la-v4l2src_calls.lo -MD -MP -MF $(DEPDIR)/libgstvideo4linux2_la-v4l2src_calls.Tpo -c -o libgstvideo4linux2_la-v4l2src_calls.lo `test -f 'v4l2src_calls.c' || echo '$(srcdir)/'`v4l2src_calls.c
 @am__fastdepCC_TRUE@	mv -f $(DEPDIR)/libgstvideo4linux2_la-v4l2src_calls.Tpo $(DEPDIR)/libgstvideo4linux2_la-v4l2src_calls.Plo
diff --git a/sys/v4l2/gstv4l2bufferpool.c b/sys/v4l2/gstv4l2bufferpool.c
index 494f46d..7ce81d1 100644
--- a/sys/v4l2/gstv4l2bufferpool.c
+++ b/sys/v4l2/gstv4l2bufferpool.c
@@ -531,7 +531,11 @@ gst_v4l2_buffer_pool_dqbuf (GstV4l2BufferPool * pool)
     GST_V4L2_BUFFER_POOL_UNLOCK (pool);
 
     /* this can change at every frame, esp. with jpeg */
+#if defined(MVL_LSP) && ( defined(Platform_dm6467) || defined(Platform_dm357))
+    GST_BUFFER_SIZE (pool_buffer) = pool->bytesused;
+#else    
     GST_BUFFER_SIZE (pool_buffer) = buffer.bytesused;
+#endif
 
     return pool_buffer;
   }
diff --git a/sys/v4l2/gstv4l2bufferpool.h b/sys/v4l2/gstv4l2bufferpool.h
index 36a4220..975c3df 100644
--- a/sys/v4l2/gstv4l2bufferpool.h
+++ b/sys/v4l2/gstv4l2bufferpool.h
@@ -64,6 +64,9 @@ struct _GstV4l2BufferPool
   gint video_fd;             /* a dup(2) of the v4l2object's video_fd */
   guint buffer_count;
   GstV4l2Buffer **buffers;
+  #if defined(MVL_LSP)
+  guint32 bytesused;
+  #endif
 };
 
 struct _GstV4l2Buffer {
diff --git a/sys/v4l2/gstv4l2object.c b/sys/v4l2/gstv4l2object.c
index 6e38fbc..da1ed41 100644
--- a/sys/v4l2/gstv4l2object.c
+++ b/sys/v4l2/gstv4l2object.c
@@ -41,6 +41,9 @@
 
 #include "gst/gst-i18n-plugin.h"
 
+#if defined(MVL_LSP)
+#include "v4l2src_mvl_lsp.h"
+#endif
 
 GST_DEBUG_CATEGORY_EXTERN (v4l2_debug);
 #define GST_CAT_DEFAULT v4l2_debug
@@ -677,6 +680,9 @@ static const guint32 gst_v4l2_formats[] = {
 #ifdef V4L2_PIX_FMT_YVYU
   V4L2_PIX_FMT_YVYU,
 #endif
+#ifdef V4L2_PIX_FMT_YUV422UVP
+   V4L2_PIX_FMT_YUV422UVP
+#endif
 };
 
 #define GST_V4L2_FORMAT_COUNT (G_N_ELEMENTS (gst_v4l2_formats))
@@ -1008,6 +1014,9 @@ gst_v4l2_object_v4l2fourcc_to_structure (guint32 fourcc)
 #ifdef V4L2_PIX_FMT_YVYU
     case V4L2_PIX_FMT_YVYU:
 #endif
+#ifdef V4L2_PIX_FMT_YUV422UVP
+    case V4L2_PIX_FMT_YUV422UVP:
+#endif
     case V4L2_PIX_FMT_YUV411P:{
       guint32 fcc = 0;
 
@@ -1050,6 +1059,11 @@ gst_v4l2_object_v4l2fourcc_to_structure (guint32 fourcc)
           fcc = GST_MAKE_FOURCC ('Y', 'V', 'Y', 'U');
           break;
 #endif
+#ifdef V4L2_PIX_FMT_YUV422UVP
+       case V4L2_PIX_FMT_YUV422UVP:
+         fcc = GST_MAKE_FOURCC ('Y', '8', 'C', '8');
+         break;
+#endif
         default:
           g_assert_not_reached ();
           break;
@@ -1204,8 +1218,14 @@ gst_v4l2_object_get_caps_info (GstV4l2Object * v4l2object, GstCaps * caps,
         break;
       case GST_MAKE_FOURCC ('N', 'V', '1', '2'):
         fourcc = V4L2_PIX_FMT_NV12;
+#if defined(MVL_LSP) && defined(Platform_dm365)
+        /* NV12 buffer on dm365 is 32-byte aligned */
+        outsize = GST_ROUND_UP_32 (*w) * GST_ROUND_UP_2 (*h);
+        outsize += (GST_ROUND_UP_32 (*w) * *h) / 2;
+#else
         outsize = GST_ROUND_UP_4 (*w) * GST_ROUND_UP_2 (*h);
         outsize += (GST_ROUND_UP_4 (*w) * *h) / 2;
+#endif
         break;
       case GST_MAKE_FOURCC ('N', 'V', '2', '1'):
         fourcc = V4L2_PIX_FMT_NV21;
@@ -1497,9 +1517,11 @@ sort_by_frame_size (GstStructure * s1, GstStructure * s2)
 }
 #endif
 
+#if !defined(MVL_LSP)
 static gboolean
 gst_v4l2_object_get_nearest_size (GstV4l2Object * v4l2object,
     guint32 pixelformat, gint * width, gint * height);
+#endif
 
 GstCaps *
 gst_v4l2_object_probe_caps_for_format (GstV4l2Object * v4l2object,
@@ -1655,6 +1677,12 @@ default_frame_sizes:
     gint min_w, max_w, min_h, max_h, fix_num = 0, fix_denom = 0;
 
     /* This code is for Linux < 2.6.19 */
+#if defined(MVL_LSP)
+    gst_v4l2src_get_resolution(v4l2object, &min_w, &min_h, &fix_num, 
+        &fix_denom); 
+    gst_v4l2src_get_resolution(v4l2object, &max_w, &max_h, &fix_num, 
+        &fix_denom);
+#else
     min_w = min_h = 1;
     max_w = max_h = GST_V4L2_MAX_SIZE;
     if (!gst_v4l2_object_get_nearest_size (v4l2object, pixelformat, &min_w,
@@ -1669,7 +1697,8 @@ default_frame_sizes:
           "Could not probe maximum capture size for pixelformat %"
           GST_FOURCC_FORMAT, GST_FOURCC_ARGS (pixelformat));
     }
-
+#endif
+   
     /* Since we can't get framerate directly, try to use the current norm */
     if (v4l2object->norm && v4l2object->norms) {
       GList *norms;
@@ -1682,8 +1711,10 @@ default_frame_sizes:
       }
       /* If it's possible, set framerate to that (discrete) value */
       if (norm) {
+#if !defined(MVL_LSP)
         fix_num = gst_value_get_fraction_numerator (&norm->framerate);
         fix_denom = gst_value_get_fraction_denominator (&norm->framerate);
+#endif
       }
     }
 
@@ -1713,6 +1744,7 @@ default_frame_sizes:
   }
 }
 
+#if !defined(MVL_LSP)
 static gboolean
 gst_v4l2_object_get_nearest_size (GstV4l2Object * v4l2object,
     guint32 pixelformat, gint * width, gint * height)
@@ -1790,6 +1822,7 @@ gst_v4l2_object_get_nearest_size (GstV4l2Object * v4l2object,
 
   return TRUE;
 }
+#endif
 
 
 gboolean
@@ -1821,6 +1854,10 @@ gst_v4l2_object_set_format (GstV4l2Object * v4l2object, guint32 pixelformat,
    *  combined, there are other modes for requesting fields individually) */
   format.fmt.pix.field = V4L2_FIELD_INTERLACED;
 
+  #if defined(MVL_LSP) 
+    v4l2object->bytesused = format.fmt.pix.sizeimage;
+  #endif
+
   if (v4l2_ioctl (fd, VIDIOC_S_FMT, &format) < 0) {
     if (errno != EINVAL)
       goto set_fmt_failed;
diff --git a/sys/v4l2/gstv4l2object.h b/sys/v4l2/gstv4l2object.h
index 853e6ac..9aabdfa 100644
--- a/sys/v4l2/gstv4l2object.h
+++ b/sys/v4l2/gstv4l2object.h
@@ -120,6 +120,14 @@ struct _GstV4l2Object {
   GstV4l2GetInOutFunction  get_in_out_func;
   GstV4l2SetInOutFunction  set_in_out_func;
   GstV4l2UpdateFpsFunction update_fps_func;
+
+#if defined(MVL_LSP) && defined(Platform_dm365)
+  gboolean force_720p_30;
+#endif
+#if defined(MVL_LSP)
+  guint32 bytesused;
+#endif
+
 };
 
 struct _GstV4l2ObjectClassHelper {
diff --git a/sys/v4l2/gstv4l2src.c b/sys/v4l2/gstv4l2src.c
index e7c83f0..ac9ccc0 100644
--- a/sys/v4l2/gstv4l2src.c
+++ b/sys/v4l2/gstv4l2src.c
@@ -80,6 +80,9 @@ enum
   V4L2_STD_OBJECT_PROPS,
   PROP_QUEUE_SIZE,
   PROP_ALWAYS_COPY,
+#if defined(MVL_LSP) && defined(Platform_dm365)
+  PROP_FORCE_720P_30,
+#endif
   PROP_INPUT_SRC
 };
 
@@ -256,6 +259,12 @@ gst_v4l2src_class_init (GstV4l2SrcClass * klass)
   g_object_class_install_property (gobject_class, PROP_INPUT_SRC,
       g_param_spec_string ("input-src", "Select the input source",
           "Select the input source)", NULL, G_PARAM_READWRITE));
+#if defined(MVL_LSP) && defined(Platform_dm365)
+  g_object_class_install_property (gobject_class, PROP_FORCE_720P_30,
+      g_param_spec_boolean ("force-720p-30", "Configure 720P @ 30fps",
+          "Force driver to work on 720P @ 30fps",
+          FALSE, G_PARAM_READWRITE));
+#endif
 
   basesrc_class->get_caps = GST_DEBUG_FUNCPTR (gst_v4l2src_get_caps);
   basesrc_class->set_caps = GST_DEBUG_FUNCPTR (gst_v4l2src_set_caps);
@@ -285,10 +294,17 @@ gst_v4l2src_init (GstV4l2Src * v4l2src, GstV4l2SrcClass * klass)
 
   v4l2src->is_capturing = FALSE;
   v4l2src->v4l2object->input_src = NULL;
+#if defined(MVL_LSP) && defined(Platform_dm365)
+  v4l2src->v4l2object->force_720p_30 = FALSE;
+#endif
 
   /* Set the default input ID on a per-target basis */
   #if defined (Platform_dm365)
+    #if defined(MVL_LSP)
+      v4l2src->v4l2object->input_id = 4;  /* Component (MVL) */
+    #else
       v4l2src->v4l2object->input_id = 2;  /* Component */
+    #endif
   #elif defined (Platform_dm6467t) || defined (Platform_dm6467)
       v4l2src->v4l2object->input_id = 1;  /* Component */
   #else
@@ -344,6 +360,11 @@ gst_v4l2src_set_property (GObject * object,
         v4l2src->v4l2object->input_src =
           g_ascii_strup(g_value_get_string(value), -1);
         break;
+#if defined(MVL_LSP) && defined(Platform_dm365)
+      case PROP_FORCE_720P_30:
+        v4l2src->v4l2object->force_720p_30 = g_value_get_boolean (value);
+        break;
+#endif
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
@@ -370,6 +391,11 @@ gst_v4l2src_get_property (GObject * object,
       case PROP_INPUT_SRC:
         g_value_set_string(value, v4l2src->v4l2object->input_src);
         break;
+#if defined(MVL_LSP) && defined(Platform_dm365)
+      case PROP_FORCE_720P_30:
+        g_value_set_boolean (value, v4l2src->v4l2object->force_720p_30);
+        break;
+#endif
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
diff --git a/sys/v4l2/v4l2_calls.c b/sys/v4l2/v4l2_calls.c
index d72a160..f6084f5 100644
--- a/sys/v4l2/v4l2_calls.c
+++ b/sys/v4l2/v4l2_calls.c
@@ -50,6 +50,10 @@
 
 #include "gst/gst-i18n-plugin.h"
 
+#if defined(MVL_LSP) && defined(Platform_dm365)
+#include "v4l2src_mvl_lsp.h"
+#endif
+
 /* Those are ioctl calls */
 #ifndef V4L2_CID_HCENTER
 #define V4L2_CID_HCENTER V4L2_CID_HCENTER_DEPRECATED
diff --git a/sys/v4l2/v4l2src_calls.c b/sys/v4l2/v4l2src_calls.c
index d8e365f..f5e8270 100644
--- a/sys/v4l2/v4l2src_calls.c
+++ b/sys/v4l2/v4l2src_calls.c
@@ -47,6 +47,10 @@
 
 #include "gst/gst-i18n-plugin.h"
 
+#if defined(MVL_LSP) && defined(Platform_dm365)
+#include "v4l2src_mvl_lsp.h"
+#endif
+
 GST_DEBUG_CATEGORY_EXTERN (v4l2src_debug);
 #define GST_CAT_DEFAULT v4l2src_debug
 
@@ -105,6 +109,10 @@ gst_v4l2src_grab_frame (GstV4l2Src * v4l2src, GstBuffer ** buf)
   v4l2object = v4l2src->v4l2object;
   pool = v4l2src->pool;
 
+  #if defined(MVL_LSP)
+  pool->bytesused = v4l2src->v4l2object->bytesused;
+  #endif
+
   GST_DEBUG_OBJECT (v4l2src, "grab frame");
 
   for (;;) {
@@ -342,6 +350,12 @@ gst_v4l2src_capture_start (GstV4l2Src * v4l2src)
   v4l2src->quit = FALSE;
 
   if (v4l2src->use_mmap) {
+#if defined(MVL_LSP) && defined(Platform_dm365)
+    if (v4l2src->v4l2object->force_720p_30) {
+        if (!gst_v4l2_force_720p_30(v4l2src))
+            return FALSE;
+    }
+#endif
     if (!gst_v4l2src_buffer_pool_activate (v4l2src->pool, v4l2src)) {
       return FALSE;
     }
diff --git a/sys/v4l2/v4l2src_mvl_lsp.c b/sys/v4l2/v4l2src_mvl_lsp.c
new file mode 100644
index 0000000..d06d339
--- /dev/null
+++ b/sys/v4l2/v4l2src_mvl_lsp.c
@@ -0,0 +1,234 @@
+/*
+ * v4l2src_mvl_lsp.c
+ *
+ * This file defines functions needed to get v4l2src on dm6446, dm355, dm6467
+ * , dm357 and dm365 LSP's.
+ *
+ *
+ * Most the code is copied from DMAI capture routines with following license:
+ *
+ * --COPYRIGHT--,BSD
+ * Copyright (c) 2009, Texas Instruments Incorporated
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * *  Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * *  Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * *  Neither the name of Texas Instruments Incorporated nor the names of
+ *    its contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ * --/COPYRIGHT--*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <string.h>
+#include <errno.h>
+#include <unistd.h>
+#include <ctype.h>
+#ifdef __sun
+/* Needed on older Solaris Nevada builds (72 at least) */
+#include <stropts.h>
+#include <sys/ioccom.h>
+#endif
+
+#include "v4l2src_mvl_lsp.h"
+
+#if defined(MVL_LSP)
+/******************************************************
+ * gst_v4l2src_get_resolution
+ *   get the video resolution
+ *****************************************************/
+void  gst_v4l2src_get_resolution (GstV4l2Object *v4l2object, gint *width, gint *height, gint *fps_num, gint *fps_denom)
+{
+  gint fd = v4l2object->video_fd;
+  v4l2_std_id  std;
+  gint failCount = 0, ret;
+  
+  do {
+    ret = ioctl(fd, VIDIOC_QUERYSTD, &std);
+    if (ret == -1 && errno == EAGAIN) {
+        usleep(1);
+        failCount++;
+    }
+  }while(ret == -1 && errno == EAGAIN && failCount < 5);
+
+  if (ret == -1) { 
+    GST_ERROR("failed to query standard, Video input connected ?\n");
+  }
+
+  /* It might take a few tries to detect the signal */
+  if (std & V4L2_STD_NTSC) {
+    GST_LOG("found ntsc standard\n");
+    *width = 720;
+    *height = 480;
+    *fps_num = 30000;
+    *fps_denom = 1001;
+  }
+  else if (std & V4L2_STD_PAL) {
+    GST_LOG("found pal standard\n");
+    *width = 720;
+    *height = 576;
+    *fps_num = 25;
+    *fps_denom = 1;
+  }
+  else if (std & V4L2_STD_525P_60) {
+    GST_LOG("found 525p standard\n");
+    *width = 720;
+    *height = 480;
+    *fps_num = 30000;
+    *fps_denom = 1001;
+  }
+  else if (std & V4L2_STD_625P_50) {
+    GST_LOG("found 625p standard\n");
+    *width = 720;
+    *height = 576;
+    *fps_num = 25;
+    *fps_denom = 1;
+  }
+  else if (std & V4L2_STD_720P_60) {
+    GST_LOG("found 720p @60fps standard\n");
+    *width = 1280;
+    *height = 720;
+    *fps_num = 60;
+    *fps_denom = 1;
+    #if defined(Platform_dm365)
+    if (v4l2object->force_720p_30) {
+        *fps_num = 30000;
+        *fps_denom = 1001;
+    }
+    #endif
+  }
+  else if (std & V4L2_STD_720P_50) {
+    GST_LOG("found 720p @50fps standard\n");
+    *width = 1280;
+    *height = 720;
+    *fps_num = 50;
+    *fps_denom = 1;
+  }
+  else if (std & V4L2_STD_1080I_60) {
+    GST_LOG("found 1080i @60fps standard\n");
+    *width = 1920;
+    *height = 1080;
+    *fps_num = 60;
+    *fps_denom = 1;
+  }
+  else if (std & V4L2_STD_1080I_50) {
+    GST_LOG("found 1080i @50fps standard\n");
+    *width = 1920;
+    *height = 1080;
+    *fps_num = 50;
+    *fps_denom = 1;
+  }
+  else if (std & V4L2_STD_1080P_30) {
+    GST_LOG("found 1080p @30fps standard\n");
+    *width = 1920;
+    *height = 1080;
+    *fps_num = 30;
+    *fps_denom = 1;
+  }
+  else if (std & V4L2_STD_1080P_25) {
+    GST_LOG("found 1080p @25fps standard\n");
+    *width = 1920;
+    *height = 1080;
+    *fps_num = 25;
+    *fps_denom = 1;
+  }
+  else if (std & V4L2_STD_1080P_24) {
+    GST_LOG("found 1080p @24fps standard\n");
+    *width = 1920;
+    *height = 1080;
+    *fps_num = 24;
+    *fps_denom = 1;
+  }
+  else {
+    GST_WARNING("failed to detect video standard\n");
+    *width = 1;
+    *height = 1;
+    *fps_num = 1;
+    *fps_denom = 1;
+  }
+}
+
+#if defined(Platform_dm365)
+/******************************************************
+ * gst_v4l2src_force_720p_30
+ *****************************************************/
+gboolean gst_v4l2_force_720p_30 (GstV4l2Src * v4l2src)
+{
+  gint fd = v4l2src->v4l2object->video_fd;
+  struct v4l2_standard   stdinfo;        
+  struct v4l2_streamparm streamparam, streamparam_s;
+  gboolean                   found;
+
+  stdinfo.index = 0;
+  found = 0;
+  while ( 0 == ioctl(fd, VIDIOC_ENUMSTD, &stdinfo)) {
+    if (stdinfo.id == V4L2_STD_720P_60) {
+        found = 1;
+        break;
+    }
+    stdinfo.index++;
+  }
+
+  if (found) {
+    /* set the streaming parameter to reduce the capture frequency to half */
+    streamparam.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    streamparam.parm.capture.timeperframe.numerator = 
+        stdinfo.frameperiod.numerator;
+    streamparam.parm.capture.timeperframe.denominator =
+        stdinfo.frameperiod.denominator / 2;    
+    streamparam_s = streamparam;
+    if (ioctl(fd, VIDIOC_S_PARM , &streamparam) < 0 ) {
+        GST_ERROR("failed to VIDIOC_S_PARM\n");
+        return FALSE;
+    }
+
+    /* verify the params */
+    if (ioctl(fd, VIDIOC_G_PARM, &streamparam) < 0) {
+        GST_ERROR("VIDIOC_G_PARM failed\n");
+        return FALSE;
+    }
+
+    if ((streamparam.parm.capture.timeperframe.numerator != 
+        streamparam_s.parm.capture.timeperframe.numerator) ||
+        (streamparam.parm.capture.timeperframe.denominator !=
+            streamparam_s.parm.capture.timeperframe.denominator)) {
+            GST_ERROR("Could not set capture driver for 30fps\n");
+            return FALSE;            
+    }
+  }
+
+  GST_ELEMENT_WARNING(v4l2src, RESOURCE, WRITE, ("forcing from 720P @60fps to "
+    "720P @30fps\n"), (NULL));
+  return TRUE;
+}
+#endif /* Platform_dm365 */
+
+#endif /* MVL_LSP */
diff --git a/sys/v4l2/v4l2src_mvl_lsp.h b/sys/v4l2/v4l2src_mvl_lsp.h
new file mode 100644
index 0000000..5f1ae7c
--- /dev/null
+++ b/sys/v4l2/v4l2src_mvl_lsp.h
@@ -0,0 +1,52 @@
+/*
+ * v4l2src_mvl_lsp.h
+ *
+ * This file defines functions needed to get v4l2src on dm6446, dm355, dm6467
+ * , dm357 and dm365 LSP's.
+ *
+ * Most the code is copied from DMAI capture routines with following license:
+ *
+ * --COPYRIGHT--,BSD
+ * Copyright (c) 2009, Texas Instruments Incorporated
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * *  Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * *  Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * *  Neither the name of Texas Instruments Incorporated nor the names of
+ *    its contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ * --/COPYRIGHT--*/
+
+#ifndef __GST_DM365_RESIZER_H__
+#define __GST_DM365_RESIZER_H__
+
+#include <gstv4l2object.h>
+#include "v4l2src_calls.h"
+
+void  gst_v4l2src_get_resolution (GstV4l2Object *v4l2object, gint *width, 
+ gint *height, gint *fps_num, gint *fps_denom);
+gboolean gst_v4l2_force_720p_30 (GstV4l2Src * v4l2src);
+
+#endif /* __GST_DM365_RESIZER_H__ */
+
-- 
1.6.3.3

