From f97432b7fb6857b57c09d56fb84a67eed1477ecf Mon Sep 17 00:00:00 2001
From: Martin Ambrose <martin@ti.com>
Date: Mon, 16 Aug 2010 09:39:42 -0500
Subject: [PATCH] da850: Add SDI (Spectrum Digital) board)

---
 Makefile                          |    6 +
 board/da8xx/da8xx-evm/Makefile    |    1 +
 board/da8xx/da8xx-evm/da850_sdi.c |  302 +++++++++++++++++++++++++++++++++++++
 include/asm-arm/mach-types.h      |   13 ++
 include/configs/da850_sdi.h       |  256 +++++++++++++++++++++++++++++++
 5 files changed, 578 insertions(+), 0 deletions(-)
 create mode 100644 board/da8xx/da8xx-evm/da850_sdi.c
 create mode 100644 include/configs/da850_sdi.h

diff --git a/Makefile b/Makefile
index 34c12cf..b4ed74c 100644
--- a/Makefile
+++ b/Makefile
@@ -2907,6 +2907,12 @@ davinci_sonata_config :	unconfig
 davinci_dm355evm_config :	unconfig
 	@$(MKCONFIG) $(@:_config=) arm arm926ejs dm355evm davinci davinci
 
+da850_sdi_config :	unconfig
+	@mkdir -p $(obj)include
+	echo "#define CONFIG_DA850_SDI" >> $(obj)include/config.h
+	$(XECHO) "... configured for DA850 SDI boot"
+	@$(MKCONFIG) -a da850_sdi arm arm926ejs da8xx-evm da8xx da8xx
+
 da850_omapl138_evm_config :	unconfig
 	@mkdir -p $(obj)include
 	echo "#define CONFIG_DA850_EVM" >> $(obj)include/config.h
diff --git a/board/da8xx/da8xx-evm/Makefile b/board/da8xx/da8xx-evm/Makefile
index 5d5c37a..bfcbce6 100644
--- a/board/da8xx/da8xx-evm/Makefile
+++ b/board/da8xx/da8xx-evm/Makefile
@@ -29,6 +29,7 @@ LIB	= $(obj)lib$(BOARD).a
 
 COBJS-$(CONFIG_DA830_EVM) += da830.o
 COBJS-$(CONFIG_DA850_EVM) += da850.o
+COBJS-$(CONFIG_DA850_SDI) += da850_sdi.o
 
 COBJS   := $(sort $(COBJS-y))
 SOBJS	:= board_init.o
diff --git a/board/da8xx/da8xx-evm/da850_sdi.c b/board/da8xx/da8xx-evm/da850_sdi.c
new file mode 100644
index 0000000..e0912ef
--- /dev/null
+++ b/board/da8xx/da8xx-evm/da850_sdi.c
@@ -0,0 +1,302 @@
+/*
+ * Copyright (C) 2008 Sekhar Nori, Texas Instruments, Inc.  <nsekhar@ti.com>
+ * 
+ * Modified for DA8xx EVM. 
+ *
+ * Copyright (C) 2007 Sergey Kubushyn <ksi@koi8.net>
+ *
+ * Parts are shamelessly stolen from various TI sources, original copyright
+ * follows:
+ * -----------------------------------------------------------------
+ *
+ * Copyright (C) 2004 Texas Instruments.
+ *
+ * ----------------------------------------------------------------------------
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ * ----------------------------------------------------------------------------
+ */
+
+#include <common.h>
+#include <i2c.h>
+#include <spi.h>
+#include <spi_flash.h>
+#include <net.h>
+#include <netdev.h>
+#include <asm/errno.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/emac_defs.h>
+
+#define MACH_TYPE_DA850_SDI		2596
+
+DECLARE_GLOBAL_DATA_PTR;
+
+void lpsc_on(unsigned domain, unsigned int id)
+{
+	dv_reg_p	mdstat, mdctl, ptstat, ptcmd;
+
+	if (id >= 64)
+		return;	
+
+	if(id < 32) {
+		mdstat = REG_P(PSC0_MDSTAT + (id * 4));
+		mdctl = REG_P(PSC0_MDCTL + (id * 4));
+		ptstat = REG_P(PSC0_PTSTAT);
+		ptcmd = REG_P(PSC0_PTCMD);
+	} else {
+		id -= 32;
+		mdstat = REG_P(PSC1_MDSTAT + (id * 4));
+		mdctl = REG_P(PSC1_MDCTL + (id * 4));
+		ptstat = REG_P(PSC1_PTSTAT);
+		ptcmd = REG_P(PSC1_PTCMD);
+	}
+	
+	while (*ptstat & (0x1 << domain)) {;}
+
+	if ((*mdstat & 0x1f) == 0x03)
+		return;			/* Already on and enabled */
+
+	*mdctl |= 0x03;
+
+	*ptcmd = 0x1 << domain;
+
+	while (*ptstat & (0x1 << domain)) {;}
+	while ((*mdstat & 0x1f) != 0x03) {;}	/* Probably an overkill... */
+}
+
+int board_init(void)
+{
+
+	dv_reg_p intc;		
+
+	/*-------------------------------------------------------*
+	 * Mask all IRQs by clearing the global enable and setting
+	 * the enable clear for all the 90 interrupts. This code is
+	 * also included in low level init. Including it here in case
+	 * low level init is skipped. Not removing it from low level
+	 * init in case some of the low level init code generates 
+	 * interrupts... Not expected... but you never know...
+	 *-------------------------------------------------------*/
+		
+#ifndef CONFIG_USE_IRQ
+	intc = REG_P(INTC_GLB_EN);
+	intc[0] = 0;	
+
+	intc = REG_P(INTC_HINT_EN);
+	intc[0] = 0;
+	intc[1] = 0;
+	intc[2] = 0;			
+
+	intc = REG_P(INTC_EN_CLR0);
+	intc[0] = 0xFFFFFFFF;
+	intc[1] = 0xFFFFFFFF;
+	intc[2] = 0xFFFFFFFF;
+#endif
+
+	/* arch number of the board */
+	gd->bd->bi_arch_number = MACH_TYPE_DA850_SDI;
+
+	/* address of boot parameters */
+	gd->bd->bi_boot_params = LINUX_BOOT_PARAM_ADDR;
+
+	/* setup the SUSPSRC for ARM to control emulation suspend */
+	REG(SUSPSRC) &= ~( (1 << 27) 	/* Timer0 */
+			| (1 << 22) 	/* SPI1 */
+			| (1 << 20) 	/* UART2 */ 
+			| (1 << 5) 	/* EMAC */
+			| (1 << 16) 	/* I2C0 */
+			);	
+
+	/* Power on required peripherals 
+	 * ARM does not have acess by default to PSC0 and PSC1
+	 * assuming here that the DSP bootloader has set the IOPU
+	 * such that PSC access is available to ARM
+	 */
+	lpsc_on(0, DAVINCI_LPSC_AEMIF);	/* NAND, NOR */
+	lpsc_on(0, DAVINCI_LPSC_SPI1);	 /* Serial Flash */
+	lpsc_on(0, DAVINCI_LPSC_EMAC);	 /* image download */
+	lpsc_on(0, DAVINCI_LPSC_UART2);	/* console */
+	lpsc_on(0, DAVINCI_LPSC_GPIO);
+
+	/* Pin Muxing support */
+	
+#ifdef CONFIG_SPI_FLASH
+	/* SPI1, use CLK, SOMI, SIMO, CS[0] */
+	REG(PINMUX5) &= 0xFF00F00F;
+	REG(PINMUX5) |= 0x00110110;
+#endif
+
+#ifdef CONFIG_DRIVER_TI_EMAC
+
+	/* Assumes RMII clock sourced externally */
+#ifdef CONFIG_DRIVER_TI_EMAC_USE_RMII
+	REG(PINMUX14) &= 0x000000FF; 
+	REG(PINMUX14) |= 0x88888800; 
+	REG(PINMUX15) &= 0xFFFFFF00; 
+	REG(PINMUX15) |= 0x00000080;
+
+	/* set cfgchip3 to selct RMII */
+	REG(CFGCHIP3) |= (1 << 8);
+
+#else	/* Use MII */
+	REG(PINMUX2) &= 0x0000000F;	
+	REG(PINMUX2) |= 0x88888880;	
+	REG(PINMUX3) = 0x88888888;
+
+	/* set cfgchip3 to selct MII */
+	REG(CFGCHIP3) &= ~(1 << 8);
+#endif
+	/* MDIO */
+	REG(PINMUX4)  &= 0xFFFFFF00; 
+	REG(PINMUX4)  |= 0x00000088; 
+#endif
+
+	/* Async EMIF */
+#if defined(CONFIG_SYS_USE_NOR)
+	REG(PINMUX5)  &= 0xF0FFFFFF;
+	REG(PINMUX5)  |= 0x01000000;
+	REG(PINMUX6)  &= 0xF0FFFFFF;
+	REG(PINMUX6)  |= 0x01000000;
+	REG(PINMUX7)  &= 0xFF00FFF0;
+	REG(PINMUX7)  |= 0x00110001;
+	REG(PINMUX8)  =  0x11111111;
+	REG(PINMUX9)  =  0x11111111;
+	REG(PINMUX10) =  0x11111111;
+	REG(PINMUX11) =  0x11111111;
+	REG(PINMUX12) =  0x11111111;
+#elif defined(CONFIG_SYS_USE_NAND)
+	REG(PINMUX7)	&= 0xFF00F00F;
+	REG(PINMUX7)	|= 0x00110110;
+	REG(PINMUX9)	= 0x11111111;
+	REG(PINMUX12)	&= 0xF00FFFFF;
+	REG(PINMUX12)	|= 0x01100000;
+#endif
+
+	/* UART2 Muxing and enabling */
+	REG(PINMUX0) &= 0x00FFFFFF; 
+	REG(PINMUX0) |= 0x44000000;
+	REG(PINMUX4) &= 0xFF00FFFF; 
+	REG(PINMUX4) |= 0x00220000;
+
+	REG(DAVINCI_UART2_BASE + 0x30) = 1 | (1 << 13) | (1 << 14);
+
+	/* I2C muxing */
+	REG(PINMUX4) &= 0xFFFF00FF;
+	REG(PINMUX4) |= 0x00002200;
+
+	return(0);
+}
+
+#define CFG_MAC_ADDR_SPI_BUS	0
+#define CFG_MAC_ADDR_SPI_CS	0
+#define CFG_MAC_ADDR_SPI_MAX_HZ	CONFIG_SF_DEFAULT_SPEED
+#define CFG_MAC_ADDR_SPI_MODE	SPI_MODE_3
+
+#define CFG_MAC_ADDR_OFFSET	(flash->size - SZ_64K)
+
+static int  get_mac_addr(u8 *addr)
+{
+	int ret;
+	struct spi_flash *flash;
+
+	flash = spi_flash_probe(CFG_MAC_ADDR_SPI_BUS, CFG_MAC_ADDR_SPI_CS,
+			CFG_MAC_ADDR_SPI_MAX_HZ, CFG_MAC_ADDR_SPI_MODE);
+	if (!flash) {
+		printf(" Error - unable to probe SPI flash.\n");
+		goto err_probe;
+	}
+
+	ret = spi_flash_read(flash, CFG_MAC_ADDR_OFFSET, 6, addr);
+	if (ret) {
+		printf("Error - unable to read MAC address from SPI flash.\n");
+		goto err_read;
+	}
+
+err_read:
+	/* cannot call free currently since the free function calls free() for
+	 * spi_flash structure though it is not directly allocated through 
+	 * malloc()
+	 */
+	/* spi_flash_free(flash); */
+err_probe:
+	return ret;
+}
+
+static void dspwake(void)
+{
+	unsigned *resetvect = (unsigned *)DAVINCI_L3CBARAM_BASE;
+	
+	/* if the device is ARM only, return */
+	if ((REG(CHIP_REV_ID_REG) & 0x3f) == 0x10)
+		return;
+	
+	if (!strcmp(getenv("dspwake"), "no"))
+		return;
+	
+	*resetvect++ = 0x1E000;	/* DSP Idle */
+	/* clear out the next 10 words as NOP */
+	memset(resetvect, 0, sizeof(unsigned) * 10);
+
+	/* setup the DSP reset vector */
+	REG(HOST1CFG) = DAVINCI_L3CBARAM_BASE;
+	
+	lpsc_on(1, DAVINCI_LPSC_GEM);
+	REG(PSC0_MDCTL + (15 * 4)) |= 0x100;
+}
+
+int misc_init_r (void)
+{
+	u_int8_t	tmp[20], addr[10];
+
+	printf ("ARM Clock : %d Hz\n", clk_get(DAVINCI_ARM_CLKID));
+	printf ("DDR Clock : %d Hz\n", clk_get(DAVINCI_DDR_CLKID)/2);
+
+	if (getenv("ethaddr") == NULL) {
+		/* Set Ethernet MAC address from EEPROM */
+		get_mac_addr(addr);
+
+		if(is_multicast_ether_addr(addr) || is_zero_ether_addr(addr)) {
+			printf("Invalid MAC address read.\n");
+			return -EINVAL;	
+		}
+		sprintf((char *)tmp, "%02x:%02x:%02x:%02x:%02x:%02x", addr[0],
+			addr[1], addr[2], addr[3], addr[4], addr[5]);
+
+		setenv("ethaddr", (char *)tmp);
+	}
+
+	dspwake();
+
+	return(0);
+}
+
+int dram_init(void)
+{
+	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
+	gd->bd->bi_dram[0].size = PHYS_SDRAM_1_SIZE;
+
+	return(0);
+}
+
+/*
+ * Initializes on-chip ethernet controllers.
+ * to override, implement board_eth_init()
+ */
+int cpu_eth_init(bd_t *bis)
+{
+#if defined(CONFIG_DRIVER_TI_EMAC)
+	davinci_emac_initialize();
+#endif
+	return 0;
+}
diff --git a/include/asm-arm/mach-types.h b/include/asm-arm/mach-types.h
index 5293d67..f60bc61 100644
--- a/include/asm-arm/mach-types.h
+++ b/include/asm-arm/mach-types.h
@@ -2241,6 +2241,7 @@ extern unsigned int __machine_arch_type;
 #define MACH_TYPE_OMAP3_WL_FF          2258
 #define MACH_TYPE_SIMCOM               2259
 #define MACH_TYPE_MCWEBIO              2260
+#define MACH_TYPE_DAVINCI_DA850_SDI    2596
 
 #ifdef CONFIG_ARCH_EBSA110
 # ifdef machine_arch_type
@@ -28990,6 +28991,18 @@ extern unsigned int __machine_arch_type;
 # define machine_is_mcwebio()	(0)
 #endif
 
+#ifdef CONFIG_MACH_DAVINCI_DA850_SDI
+# ifdef machine_arch_type
+#  undef machine_arch_type
+#  define machine_arch_type	__machine_arch_type
+# else
+#  define machine_arch_type	MACH_TYPE_DAVINCI_DA850_SDI
+# endif
+# define machine_is_davinci_da850_sdi()	(machine_arch_type == MACH_TYPE_DAVINCI_DA850_SDI)
+#else
+# define machine_is_davinci_da850_sdi()	(0)
+#endif
+
 /*
  * These have not yet been registered
  */
diff --git a/include/configs/da850_sdi.h b/include/configs/da850_sdi.h
new file mode 100644
index 0000000..d818b43
--- /dev/null
+++ b/include/configs/da850_sdi.h
@@ -0,0 +1,256 @@
+/*
+ * Copyright (C) 2008 Texas Instruments, Inc <www.ti.com>
+ * 
+ * Based on davinci_dvevm.h. Original Copyrights follow:
+ *
+ * Copyright (C) 2007 Sergey Kubushyn <ksi@koi8.net>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+#include <asm/sizes.h>
+#include <asm/arch/hardware.h>
+
+/*=======*/
+/* Board */
+/*=======*/
+#define	CONFIG_USE_SPIFLASH
+#undef	CONFIG_SYS_USE_NAND 
+#undef	CONFIG_SYS_USE_NOR 
+
+#define CONFIG_SYS_I2C_EXPANDER_ADDR	0x20
+
+/*===================*/
+/* I2C Configuration */
+/*===================*/
+#define CONFIG_HARD_I2C
+#define CONFIG_DRIVER_DAVINCI_I2C
+#define CONFIG_SYS_I2C_SPEED		25000
+/* Bogus, master-only in U-Boot */
+#define CONFIG_SYS_I2C_SLAVE		10
+
+/*===================*/
+/* SoC Configuration */
+/*===================*/
+#define CONFIG_ARM926EJS	
+/* Arm Clock */
+#define CONFIG_SYS_CLK_FREQ		clk_get(DAVINCI_ARM_CLKID)
+#define CFG_OSCIN_FREQ			24000000
+/* timer to be used */
+#define CONFIG_SYS_TIMERBASE		DAVINCI_TIMER0_BASE	
+/* Timer Input clock freq */
+#define CONFIG_SYS_HZ_CLOCK		clk_get(DAVINCI_AUXCLK_CLKID)
+#define CONFIG_SYS_HZ			1000
+/* U-Boot is _always_ loaded by a bootloader... */
+#undef CONFIG_SKIP_LOWLEVEL_INIT
+/*... to a proper address, init done */
+#define CONFIG_SKIP_RELOCATE_UBOOT
+
+/*=============*/
+/* Memory Info */
+/*=============*/
+/* malloc() len */
+#define CONFIG_SYS_MALLOC_LEN		(1 * 1024 * 1024)
+/* reserved for initial data */
+#define CONFIG_SYS_GBL_DATA_SIZE	128
+/* DDR Start */
+#define PHYS_SDRAM_1			DAVINCI_DDR_EMIF_DATA_BASE
+/* SDRAM size 64MB */
+#define PHYS_SDRAM_1_SIZE		0x04000000
+/* memtest start address */
+#define CONFIG_SYS_MEMTEST_START	PHYS_SDRAM_1
+/* 16MB RAM test */
+#define CONFIG_SYS_MEMTEST_END		(PHYS_SDRAM_1 + 16*1024*1024)
+/* we have 1 bank of DRAM */
+#define CONFIG_NR_DRAM_BANKS		1
+/* regular stack */
+#define CONFIG_STACKSIZE		(256*1024)	
+
+/*====================*/
+/* Serial Driver info */
+/*====================*/
+#define CONFIG_SYS_NS16550
+#define CONFIG_SYS_NS16550_SERIAL
+#define CONFIG_SYS_NS16550_REG_SIZE	-4		
+/* use first UART for console */
+#define CONFIG_CONS_INDEX		1
+/* Base address of console UART */
+#define CONFIG_SYS_NS16550_COM1		DAVINCI_UART2_BASE	
+/* Input clock to NS16550 */
+#define CONFIG_SYS_NS16550_CLK		clk_get(DAVINCI_UART2_CLKID)
+/* Default baud rate */
+#define CONFIG_BAUDRATE			115200
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+
+/*==================================*/
+/* SPI Flash Configuration	    */
+/*==================================*/
+#define CONFIG_SPI
+#define CONFIG_SPI_FLASH
+#define CONFIG_SPI_FLASH_WINBOND
+#define CONFIG_DAVINCI_SPI
+#define CFG_SPI_BASE			DAVINCI_SPI1_BASE
+#define CFG_SPI_CLK			clk_get(DAVINCI_SPI1_CLKID)
+#define CONFIG_SF_DEFAULT_SPEED		50000000
+
+/*==================================*/
+/* Network & Ethernet Configuration */
+/*==================================*/
+#define CONFIG_DRIVER_TI_EMAC
+#define CONFIG_DRIVER_TI_EMAC_USE_RMII
+#define CONFIG_MII
+#define CONFIG_BOOTP_DEFAULT
+#define CONFIG_BOOTP_DNS
+#define CONFIG_BOOTP_DNS2
+#define CONFIG_BOOTP_SEND_HOSTNAME
+#define CONFIG_NET_RETRY_COUNT		10
+#define CONFIG_NET_MULTI
+#define CONFIG_NETCONSOLE
+
+/*=====================*/
+/* Flash & Environment */
+/*=====================*/
+#ifdef CONFIG_SYS_USE_NAND
+#undef CONFIG_ENV_IS_IN_FLASH
+#define CONFIG_SYS_NO_FLASH
+#define CONFIG_ENV_IS_IN_NAND
+#define CONFIG_ENV_SIZE			SZ_128K
+#define CONFIG_NAND_CS			2
+#define CONFIG_SYS_NAND_BASE		DAVINCI_ASYNC_EMIF_DATA_CE3_BASE
+#define CONFIG_CLE_MASK			0x10
+#define CONFIG_ALE_MASK			0x8
+#undef CONFIG_SYS_NAND_HW_ECC
+#define CONFIG_SYS_NAND_4BIT_HW_ECC
+#define CONFIG_SYS_NAND_USE_FLASH_BBT
+#define CFG_DAVINCI_STD_NAND_LAYOUT
+/* Max number of NAND devices */
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define NAND_MAX_CHIPS			1
+/* Block 0--not used by bootcode */
+#define CONFIG_ENV_OFFSET		0x0	
+#endif
+
+#ifdef CONFIG_SYS_USE_NOR
+#define CONFIG_ENV_IS_IN_FLASH
+#undef CONFIG_SYS_NO_FLASH
+#define CONFIG_FLASH_CFI_DRIVER
+#define CONFIG_SYS_FLASH_CFI
+#define CONFIG_SYS_FLASH_PROTECTION
+#define CONFIG_SYS_MAX_FLASH_BANKS	1
+#define CONFIG_SYS_FLASH_SECT_SZ	0x20000	
+#define CONFIG_ENV_OFFSET		(CONFIG_SYS_FLASH_SECT_SZ * 3)
+#define CONFIG_SYS_FLASH_BASE		DAVINCI_ASYNC_EMIF_DATA_CE2_BASE 
+#define PHYS_FLASH_SIZE			0x800000	
+#define CONFIG_SYS_MAX_FLASH_SECT	(PHYS_FLASH_SIZE/CONFIG_SYS_FLASH_SECT_SZ) + 3
+#define CONFIG_ENV_SECT_SIZE		CONFIG_SYS_FLASH_SECT_SZ	
+#endif
+
+#ifdef CONFIG_USE_SPIFLASH
+#undef CONFIG_ENV_IS_IN_FLASH
+#undef CONFIG_ENV_IS_IN_NAND
+#define CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_ENV_SIZE			SZ_64K
+#define CONFIG_ENV_OFFSET		SZ_256K
+#define CONFIG_ENV_SECT_SIZE		SZ_64K
+#define CONFIG_SYS_NO_FLASH
+#define CONFIG_ENV_SPI_MAX_HZ		CONFIG_SF_DEFAULT_SPEED
+#endif
+
+
+/*==============================*/
+/* U-Boot general configuration */
+/*==============================*/
+/* No IRQ/FIQ in U-Boot */
+#undef 	CONFIG_USE_IRQ
+#define CONFIG_MISC_INIT_R
+#undef CONFIG_BOOTDELAY
+#define CONFIG_BOOTFILE			"uImage"
+/* Monitor Command Prompt */
+#define CONFIG_SYS_PROMPT		"U-Boot > "
+/* Console I/O Buffer Size */
+#define CONFIG_SYS_CBSIZE		1024
+/* Print buffer sz */
+#define CONFIG_SYS_PBSIZE		(CONFIG_SYS_CBSIZE + \
+						sizeof(CONFIG_SYS_PROMPT) + 16)
+/* max number of command args */
+#define CONFIG_SYS_MAXARGS		16
+/* Boot Argument Buffer Size */
+#define CONFIG_SYS_BARGSIZE		CONFIG_SYS_CBSIZE
+/* default Linux kernel load address */
+#define CONFIG_SYS_LOAD_ADDR		(CONFIG_SYS_MEMTEST_START + 0x700000)
+#define CONFIG_VERSION_VARIABLE
+/* Won't work with hush so far, may be later */
+#define CONFIG_AUTO_COMPLETE
+#define CONFIG_SYS_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
+#define CONFIG_CMDLINE_EDITING
+#define CONFIG_SYS_LONGHELP
+#define CONFIG_CRC32_VERIFY
+#define CONFIG_MX_CYCLIC
+
+/*===================*/
+/* Linux Information */
+/*===================*/
+#define LINUX_BOOT_PARAM_ADDR		(CONFIG_SYS_MEMTEST_START + 0x100)
+#define CONFIG_CMDLINE_TAG
+#define CONFIG_SETUP_MEMORY_TAGS
+#define CONFIG_BOOTCOMMAND		"sf probe 0;sf read 0xc0700000 0x80000 0x200000;sf read 0xc1180000 0x280000 0x300000;bootm 0xc0700000"
+#define CONFIG_BOOTARGS			"mem=32M console=ttyS2,115200n8 root=/dev/ram0 rw initrd=0xc1180000,4M ip=off"
+#define CONFIG_BOOTDELAY		3
+
+/*=================*/
+/* U-Boot commands */
+/*=================*/
+#include <config_cmd_default.h>
+#define CONFIG_CMD_ENV
+#define CONFIG_CMD_ASKENV
+#define CONFIG_CMD_DHCP
+#define CONFIG_CMD_DIAG
+#define CONFIG_CMD_MII
+#define CONFIG_CMD_PING
+#define CONFIG_CMD_SAVES
+#define CONFIG_CMD_MEMORY
+#undef CONFIG_CMD_BDI
+#undef CONFIG_CMD_FPGA
+#undef CONFIG_CMD_SETGETDCR
+#define CONFIG_CMD_EEPROM
+#define CONFIG_CMD_NET
+
+#ifdef CONFIG_SYS_USE_NAND
+#undef CONFIG_CMD_FLASH
+#undef CONFIG_CMD_IMLS
+#define CONFIG_CMD_NAND
+#endif
+
+#ifdef CONFIG_USE_SPIFLASH
+#undef CONFIG_CMD_IMLS
+#undef CONFIG_CMD_FLASH
+#define CONFIG_CMD_SF
+#endif
+
+#if !defined(CONFIG_SYS_USE_NAND) && !defined(CONFIG_SYS_USE_NOR) && !defined(CONFIG_USE_SPIFLASH)
+#define CONFIG_ENV_IS_NOWHERE
+#define CONFIG_SYS_NO_FLASH
+#define CONFIG_ENV_SIZE				SZ_16K
+#undef CONFIG_CMD_IMLS
+#undef CONFIG_CMD_FLASH
+#undef CONFIG_CMD_ENV
+#endif
+
+#endif /* __CONFIG_H */
-- 
1.7.0.1

