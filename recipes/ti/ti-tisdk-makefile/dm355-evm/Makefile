include Rules.make

DEFAULT_LINUXKERNEL_CONFIG=davinci_dm355_defconfig
DEFAULT_UBOOT_CONFIG=davinci_dm355evm_config

.PHONY:	all clean everything clobber help cmem cmem_clean cmem_install dmai dmai_clean dmai_install dm355mm dm355mm_clean dm355mm_install linux linux_clean linux_install psp_examples psp_example_clean psp_example_install edma_install install demos demos_clean demos_install u-boot u-boot_clean u-boot_install ubl ubl_clean ubl_install

#==============================================================================
# The default build target builds components to enable all other build targets.
#==============================================================================
all:	linux

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
clean:	linux_clean

#==============================================================================
# Build everything rebuildable.
#==============================================================================
everything: linux psp_examples cmem dm355mm ceexamples dmai demos u-boot ubl

#==============================================================================
# Install everything
#==============================================================================
install: linux_install cmem_install dm355mm_install dmai_install psp_examples_install ceexamples_install demos_install u-boot_install ubl_install

#==============================================================================
# Clean up all targets.
#==============================================================================
clobber:    linux_clean psp_examples_clean dmai_clean ceexamples_clean cmem_clean dm355mm_clean demos_clean u-boot_clean ubl_clean

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are:"
	@echo
	@echo "    all                          : Build the components for which a rebuild is necessary to enable all other build targets listed below. You must do this at least once upon installation prior to attempting the other targets."
	@echo "    clean                        : Remove files generated by the 'all' target"
	@echo
	@echo "    demos                        : Build the DVSDK demos for $(PLATFORM)"
	@echo "    demos_clean                  : Remove generated DVSDK demo files."
	@echo "    demos_install                : Install DVSDK demos"
	@echo
	@echo "    dvtb                         : Build DVTB for $(PLATFORM)"
	@echo "    dvtb_clean                   : Remove generated DVTB files"
	@echo
	@echo "    cmem                         : Build the CMEM kernel module"
	@echo "    cmem_clean                   : Remove generated cmem files."
	@echo "    cmem_install                 : Install cmemk module"
	@echo
	@echo "    dm355mm                      : Build the dm355mm kernel module"
	@echo "    dm355mm_clean                : Remove generated dm355mm files"
	@echo "    dm355mm_install              : Install dm355mm module"
	@echo
	@echo
	@echo "    dmai                         : Build DMAI"
	@echo "    dmai_clean                   : Remove generated DMAI files."
	@echo "    dmai_install                 : Install dmai app"
	@echo
	@echo "    ceexamples                   : Build CE codecs, extensions, servers and apps"
	@echo "    ceexamples_clean             : Remove generated CE example files."
	@echo
	@echo "    linux                        : Build Linux kernel uImage and module"
	@echo "    linux_clean                  : Remove generated Linux kernel files"
	@echo "    linux_install                : Install kernel binary and  modules"
	@echo
	@echo "    ubl                          : Build the ubl boot loader"
	@echo "    ubl_clean                    : Remove generated ubl files"
	@echo "    ubl_install                  : Install the ubl image"
	@echo
	@echo "    u-boot                       : Build the u-boot boot loader"
	@echo "    u-boot_clean                 : Remove generated u-boot files"
	@echo "    u-boot_install               : Install the u-boot image"
	@echo
	@echo "    psp_examples                 : Build Linux examples"
	@echo "    psp_examples_clean           : Remove all generated PSP examples"
	@echo "    psp_examples_install         : Install psp examples"
	@echo
	@echo "    everything                   : Rebuild everything"
	@echo "    clobber                      : Remove all generated files"
	@echo
	@echo "    install                      : Install all the targets in "
	@echo "				   $(EXEC_DIR)"
	@echo

#==============================================================================
# Build the dvsdk demos for the configured platform. Also, an explicit cleanup
# target is defined.
#==============================================================================
demos:
	$(MAKE) -C $(DEMO_INSTALL_DIR) $(PLATFORM) DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) CODEC_INSTALL_DIR=$(CODEC_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) DMAI_INSTALL_DIR=$(DMAI_INSTALL_DIR) MVTOOL_DIR=$(MVTOOL_DIR) CC=$(CSTOOL_PREFIX)gcc AR=$(CSTOOL_PREFIX)ar CROSS_COMPILE=$(MVTOOL_PREFIX) LINUXLIBS_INSTALL_DIR=$(LINUXLIBS_INSTALL_DIR) PLATFORM=$(PLATFORM)

demos_clean:
	$(MAKE) -C $(DEMO_INSTALL_DIR) clean DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) CODEC_INSTALL_DIR=$(CODEC_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) DMAI_INSTALL_DIR=$(DMAI_INSTALL_DIR) MVTOOL_DIR=$(MVTOOL_DIR) CC=$(CSTOOL_PREFIX)gcc CROSS_COMPILE=$(MVTOOL_PREFIX) LINUXLIBS_INSTALL_DIR=$(LINUXLIBS_INSTALL_DIR) PLATFORM=$(PLATFORM)

demos_install:
	install -d $(EXEC_DIR)/dvsdk-demos
	$(MAKE) -C $(DEMO_INSTALL_DIR) install DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) CODEC_INSTALL_DIR=$(CODEC_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) DMAI_INSTALL_DIR=$(DMAI_INSTALL_DIR) MVTOOL_DIR=$(MVTOOL_DIR) CC=$(CSTOOL_PREFIX)gcc CROSS_COMPILE=$(MVTOOL_PREFIX) LINUXLIBS_INSTALL_DIR=$(LINUXLIBS_INSTALL_DIR) EXEC_DIR=$(EXEC_DIR)/dvsdk-demos PLATFORM=$(PLATFORM)

#==============================================================================
# Build the Digital Video Test Bench for the configured platform. Also, an
# explicit cleanup target is defined.
#==============================================================================
dvtb:
	$(MAKE) -C $(DVTB_INSTALL_DIR) $(PLATFORM) CODECS=TSPA
	@echo
	@echo "dvtb can be found under $(DVTB_INSTALL_DIR)/packages/ti/sdo/dvtb/$(PLATFORM)/bin"

dvtb_clean:
	$(MAKE) -C $(DVTB_INSTALL_DIR) clean

#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux:	u-boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_LINUXKERNEL_CONFIG)
	PATH="$(PATH):$(PSP_INSTALL_DIR)/u-boot-source/tools" $(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) uImage
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) modules

linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) mrproper 
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) clean

linux_install:
	install -d $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/vmlinux $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/System.map $(EXEC_DIR)/boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) INSTALL_MOD_PATH=$(EXEC_DIR)/ modules_install

#==============================================================================
# Build ubl. Also, an explicit cleanup target is defined.
#==============================================================================
ubl:
	$(MAKE) -C $(PSP_INSTALL_DIR)/board-utilities/DM35x/GNU/ubl CROSSCOMPILE=$(CSTOOL_PREFIX)
	$(MAKE) -C $(PSP_INSTALL_DIR)/board-utilities/DM35x_Rev_C/GNU/ubl CROSSCOMPILE=$(CSTOOL_PREFIX)

ubl_clean:
	$(MAKE) -C $(PSP_INSTALL_DIR)/board-utilities/DM35x/GNU/ubl clean
	$(MAKE) -C $(PSP_INSTALL_DIR)/board-utilities/DM35x_Rev_C/GNU/ubl clean

ubl_install:
	install -d $(EXEC_DIR)/boot
	install -d $(EXEC_DIR)/boot/DM35x
	install -d $(EXEC_DIR)/boot/DM35x_Rev_C
	install $(PSP_INSTALL_DIR)/board-utilities/DM35x/GNU/ubl/*.bin $(EXEC_DIR)/boot/DM35x
	install $(PSP_INSTALL_DIR)/board-utilities/DM35x_Rev_C/GNU/ubl/*.bin $(EXEC_DIR)/boot/DM35x_Rev_C

#==============================================================================
# Build u-boot. Also, an explicit cleanup target is defined.
#==============================================================================
u-boot:
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-source CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-source CROSS_COMPILE=$(CSTOOL_PREFIX)

u-boot_clean: 
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-source CROSS_COMPILE=$(CSTOOL_PREFIX) distclean

u-boot_install:
	install -d $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-source/u-boot.bin $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-source/u-boot.map $(EXEC_DIR)/boot

#==============================================================================
# Build the PSP Linux examples. Also, an explicit cleanup target is defined.
#==============================================================================
psp_examples:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples/media_ti KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR)/include CROSS_COMPILE=$(CSTOOL_PREFIX) all

psp_examples_clean:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples/media_ti KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR)/include CROSS_COMPILE=$(CSTOOL_PREFIX) clean

psp_examples_install:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples/media_ti KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR)/include CROSS_COMPILE=$(CSTOOL_PREFIX) EXEC_DIR=$(EXEC_DIR)/psp-examples install
	
#==============================================================================
# Build the CMEM kernel module for the configured platform, and make sure the
# kernel_binaries directory is kept in sync. Also, an explicit cleanup target
# is defined.
#==============================================================================
cmem:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface ../../lib/cmem.a470MV
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module

cmem_clean:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module clean
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface clean

cmem_install:
	install -d $(EXEC_DIR)/cmem
	install $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module/cmemk.ko $(EXEC_DIR)/cmem

#==============================================================================
# Build the dm355mm kernel module (if the configured platform is dm355). Also,
# an explicit cleanup target is defined.
#==============================================================================
dm355mm:
	$(MAKE) -C $(CODEC_INSTALL_DIR)/dm355mm/module \
	LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	 MVTOOL_PREFIX=$(CSTOOL_PREFIX)

dm355mm_clean:
	$(MAKE) -C $(CODEC_INSTALL_DIR)/dm355mm/module \
	LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	 MVTOOL_PREFIX=$(CSTOOL_PREFIX) clean

dm355mm_install:
	install -d $(EXEC_DIR)/dm355mm
	install $(DM355MM_MODULE_INSTALL_DIR)/module/dm355mmap.ko  $(EXEC_DIR)/dm355mm

#==============================================================================
# Build the Davinci Multimedia Application Interface for the configured
# platform. Also, an explicit cleanup target is defined.
#==============================================================================
dmai:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(PLATFORM)_al \
	CE_INSTALL_DIR_$(PLATFORM)_al=$(CE_INSTALL_DIR) \
	CODEC_INSTALL_DIR_$(PLATFORM)_al=$(CODEC_INSTALL_DIR) \
	CMEM_INSTALL_DIR_$(PLATFORM)_al=$(CMEM_INSTALL_DIR) \
	FC_INSTALL_DIR_$(PLATFORM)_al=$(FC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR_$(PLATFORM)_al=$(XDAIS_INSTALL_DIR) \
	LINUXLIBS_INSTALL_DIR_$(PLATFORM)_al=$(LINUXLIBS_INSTALL_DIR) \
	LINUXKERNEL_INSTALL_DIR_$(PLATFORM)_al=$(LINUXKERNEL_INSTALL_DIR) \
	CROSS_COMPILE_$(PLATFORM)_al=$(CSTOOL_PREFIX) \
	XDC_INSTALL_DIR_$(PLATFORM)_al=$(XDC_INSTALL_DIR) \
	VERBOSE=true \
	all
	
dmai_clean:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(PLATFORM)_al \
	XDC_INSTALL_DIR_$(PLATFORM)_al=$(XDC_INSTALL_DIR) \
	clean

dmai_install:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(PLATFORM)_al \
	EXEC_DIR_$(PLATFORM)_al=$(EXEC_DIR)/dmai \
	install

###############################################################################
# Build codec engine examples
###############################################################################
ceexamples_apps:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_apps_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_apps_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps to target filesystem. "
	@echo 

ceexamples_extensions:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_extensions_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_extensions_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions to target filesystem. "
	@echo 


ceexamples_servers:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_servers_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_servers_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers to target filesystem. "
	@echo 


ceexamples_codecs:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_codecs_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="DM355" \
	GPPOS=LINUX_GCC \
	PROGRAMS=APP_LOCAL \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_codecs_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs to target filesystem. "
	@echo 

ceexamples: ceexamples_codecs ceexamples_extensions ceexamples_servers ceexamples_apps
 
ceexamples_clean: ceexamples_codecs_clean ceexamples_extensions_clean ceexamples_servers_clean ceexamples_apps_clean

ceexamples_install: ceexamples_codecs_install ceexamples_extensions_install ceexamples_servers_install ceexamples_apps_install



