include Rules.make

DEFAULT_LINUXKERNEL_CONFIG=da830_omapl137_defconfig
DEFAULT_UBOOT_CONFIG=da830_omapl137_evm_config

DMAI_PLATFORM = ol137

.PHONY:	all clean everything clobber help cmem cmem_clean cmem_install dmai dmai_clean dmai_install linux linux_clean linux_install psp_examples psp_example_clean psp_example_install install codecs codecs_clean codecs_install u-boot u-boot_clean u-boot_install ubl ubl_clean ubl_install

#==============================================================================
# The default build target builds components to enable all other build targets.
#==============================================================================
all:	linux dsplink

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
clean:	linux_clean dsplink_clean

#==============================================================================
# Build everything rebuildable.
#==============================================================================
everything: all linux psp_examples cmem dsplink codecs ceexamples dmai u-boot ubl

#==============================================================================
# Install everything
#==============================================================================
install: linux_install cmem_install dmai_install psp_examples_install ceexamples_install codecs_install dsplink_install u-boot_install ubl_install

#==============================================================================
# Clean up all targets.
#==============================================================================
clobber:    linux_clean psp_examples_clean dmai_clean ceexamples_clean cmem_clean codecs_clean dsplink_clean u-boot_clean ubl_clean

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are:"
	@echo
	@echo "    all                          : Build the components for which a rebuild is necessary to enable all other build targets listed below. You must do this at least once upon installation prior to attempting the other targets."
	@echo "    clean                        : Remove files generated by the 'all' target"
	@echo 
	@echo "    cmem                         : Build the CMEM kernel module"
	@echo "    cmem_clean                   : Remove generated cmem files."
	@echo "    cmem_install                 : Install cmemk module"
	@echo
	@echo "    dmai                         : Build DMAI"
	@echo "    dmai_clean                   : Remove generated DMAI files."
	@echo "    dmai_install                 : Install dmai app"
	@echo
	@echo "    codecs                       : Build codec package"
	@echo "    codecs_clean                 : Remove generated codec files."
	@echo "    codecs_install               : Install codec executable"
	@echo
	@echo "    dsplink                      : Configure and build DSP Link for ARM and DSP and sample examples"
	@echo "    dsplink_clean                : Remove generated DSP Link files"
	@echo "    dsplink_install              : Install ARM and DSP link files"
	@echo
	@echo "    dsplink_arm                  : Configure and build DSP Link for ARM"
	@echo "    dsplink_arm_clean            : Clean DSP Link for ARM"
	@echo 
	@echo "    dsplink_dsp                  : Configure and build DSP Link for DSP"
	@echo "    dsplink_dsp_clean            : Clean DSP Link for DSP"
	@echo 
	@echo "    dsplink_samples              : Build DSP Link ARM and DSP sample applications"
	@echo "    dsplink_samples_clean        : Build DSP Link ARM and DSP sample applications"
	@echo
	@echo "    ceexamples                   : Build CE codecs, extensions, servers and apps"
	@echo "    ceexamples_clean             : Remove generated CE example files."
	@echo
	@echo "    linux                        : Build Linux kernel uImage and module"
	@echo "    linux_clean                  : Remove generated Linux kernel files"
	@echo "    linux_install                : Install kernel binary and  modules"
	@echo
	@echo "    ubl                          : Build the ubl boot loader"
	@echo "    ubl_clean                    : Remove generated ubl files"
	@echo "    ubl_install                  : Install the ubl image"
	@echo
	@echo "    u-boot                       : Build the u-boot boot loader"
	@echo "    u-boot_clean                 : Remove generated u-boot files"
	@echo "    u-boot_install               : Install the u-boot image"
	@echo
	@echo "    psp_examples                 : Build Linux examples"
	@echo "    psp_examples_clean           : Remove all generated PSP examples"
	@echo "    psp_examples_install         : Install psp examples"
	@echo
	@echo "    audio_soc_example            : Build Audio Soc example app"
	@echo "    audio_soc_example_clean      : Remove generated Audio Soc example files"
	@echo
	@echo "    everything                   : Rebuild everything"
	@echo "    clobber                      : Remove all generated files"
	@echo
	@echo "    install                      : Install all the targets in "
	@echo "                            $(EXEC_DIR)"
	@echo

#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux:	u-boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_LINUXKERNEL_CONFIG)
	PATH="$(PATH):$(PSP_INSTALL_DIR)/u-boot-source/tools" $(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) uImage
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) modules
linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) mrproper
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) clean

linux_install:
	install -d $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/vmlinux $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/System.map $(EXEC_DIR)/boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) INSTALL_MOD_PATH=$(EXEC_DIR)/ modules_install

#==============================================================================
# Build ubl. Also, an explicit cleanup target is defined.
#==============================================================================
ubl:
	$(MAKE) -C $(PSP_INSTALL_DIR)/board-utilities/OMAP-L137/GNU/ubl CROSSCOMPILE=$(CSTOOL_PREFIX)

ubl_clean:
	$(MAKE) -C $(PSP_INSTALL_DIR)/board-utilities/OMAP-L137/GNU/ubl clean

ubl_install:
	install -d $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/board-utilities/OMAP-L137/GNU/ubl/*.bin $(EXEC_DIR)/boot

#==============================================================================
# Build u-boot. Also, an explicit cleanup target is defined.
#==============================================================================
u-boot:
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-source CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-source CROSS_COMPILE=$(CSTOOL_PREFIX)

u-boot_clean: 
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-source CROSS_COMPILE=$(CSTOOL_PREFIX) distclean

u-boot_install:
	install -d $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-source/u-boot.bin $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-source/u-boot.map $(EXEC_DIR)/boot

#==============================================================================
# Build the PSP Linux examples. Also, an explicit cleanup target is defined.
#==============================================================================
psp_examples:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples/media_ti KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR)/include CROSS_COMPILE=$(CSTOOL_PREFIX) all

psp_examples_clean:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples/media_ti KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR)/include CROSS_COMPILE=$(CSTOOL_PREFIX) clean

psp_examples_install:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples/media_ti KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR)/include CROSS_COMPILE=$(CSTOOL_PREFIX) EXEC_DIR=$(EXEC_DIR)/psp-examples install
	
#==============================================================================
# Build the CMEM kernel module for the configured platform, and make sure the
# kernel_binaries directory is kept in sync. Also, an explicit cleanup target
# is defined.
#==============================================================================
cmem:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface ../../lib/cmem.a470MV
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module

cmem_clean:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module clean
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface clean

cmem_install:
	install -d $(EXEC_DIR)/cmem
	install $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module/cmemk.ko $(EXEC_DIR)/cmem

#==============================================================================
# Build codec package for the configured platform. Also, an explicit cleanup
# target is defined.
#==============================================================================
codecs:
	$(MAKE) -C $(CODEC_INSTALL_DIR) \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	XDCARGS="eval" \
	all

codecs_clean:
	$(MAKE) -C $(CODEC_INSTALL_DIR) \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	XDCARGS="eval" \
	clean

codecs_install:
	install -d $(EXEC_DIR)/codecs-server
	for file in $(shell find $(CODEC_INSTALL_DIR) -name *.x64P); do \
	cp $$file $(EXEC_DIR)/codecs-server ; \
	done
		
#==============================================================================
# Build the Davinci Multimedia Application Interface for the configured
# platform. Also, an explicit cleanup target is defined.
#==============================================================================
dmai:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(DMAI_PLATFORM)_al \
	CE_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CE_INSTALL_DIR) \
	CODEC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CODEC_INSTALL_DIR) \
	CMEM_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CMEM_INSTALL_DIR) \
	FC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(FC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(XDAIS_INSTALL_DIR) \
	LINUXLIBS_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(LINUXLIBS_INSTALL_DIR) \
	LINUXKERNEL_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(LINUXKERNEL_INSTALL_DIR) \
	CROSS_COMPILE_$(DMAI_PLATFORM)_al=$(CSTOOL_PREFIX) \
	XDC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(XDC_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CODEGEN_INSTALL_DIR) \
	LINK_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(LINK_INSTALL_DIR) \
	VERBOSE=true \
	all
	
dmai_clean:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(DMAI_PLATFORM)_al \
	XDC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(XDC_INSTALL_DIR) \
	clean

dmai_install:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(DMAI_PLATFORM)_al \
	EXEC_DIR_$(DMAI_PLATFORM)_al=$(EXEC_DIR)/dmai \
	install

###############################################################################
# Build codec engine examples
###############################################################################
ceexamples_apps:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="OMAPL137" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_apps_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="OMAPL137" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_apps_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps to target filesystem. "
	@echo 

ceexamples_extensions:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions \
	DEVICES="OMAPL137" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_extensions_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="OMAPL137" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_extensions_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions to target filesystem. "
	@echo 


ceexamples_servers:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers  \
	DEVICES="OMAPL137" \
	GPPOS="LINUX_GCC" \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_servers_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers \
	DEVICES="OMAPL137" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_servers_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers to target filesystem. "
	@echo 


ceexamples_codecs:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="OMAPL137" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_codecs_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="OMAPL137" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_codecs_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs to target filesystem. "
	@echo 

ceexamples: ceexamples_codecs ceexamples_extensions ceexamples_servers ceexamples_apps
 
ceexamples_clean: ceexamples_codecs_clean ceexamples_extensions_clean ceexamples_servers_clean ceexamples_apps_clean

ceexamples_install: ceexamples_codecs_install ceexamples_extensions_install ceexamples_servers_install ceexamples_apps_install


dsplink_cfg:
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	perl $(LINK_INSTALL_DIR)/dsplink/config/bin/dsplinkcfg.pl \
	--platform=OMAPL1XX  --nodsp=1 --dspcfg_0=OMAPL1XXGEMSHMEM \
	--dspos_0=DSPBIOS5XX --gppos=ARM --comps=ponslrmc

dsplink_arm_clean:
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/gpp/src \
	CROSS_COMPILE=$(CSTOOL_PREFIX) \
	CC=$(CSTOOL_PREFIX)gcc \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) \
	clean 

dsplink_arm: dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/gpp/src \
	CROSS_COMPILE=$(CSTOOL_PREFIX) \
	CC=$(CSTOOL_PREFIX)gcc \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) \
	all

dsplink_dsp_clean:
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/dsp/src \
	BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) \
	BASE_SABIOS=$(BIOS_INSTALL_DIR) \
	clean 

dsplink_dsp: dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/dsp/src \
	BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) \
	BASE_SABIOS=$(BIOS_INSTALL_DIR) \
	all

dsplink_samples_clean:
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE)	-C $(LINK_INSTALL_DIR)/dsplink/gpp/src/samples \
	BASE_TOOLCHAIN=$(CSTOOL_DIR) \
	BASE_CGTOOLS=${CSTOOL_DIR}/bin \
	OSINC_PLATFORM="$(CSTOOL_PREFIX)/lib/gcc/arm-none-linux-gnueabi/$($(CSTOOL_PREFIX) --dumversion)/include" \
	OSINC_TARGET="${CSTOOL_DIR}/target/usr/include" \
	CROSS_COMPILE="$(CSTOOL_PREFIX)" \
	CC=$(CSTOOL_PREFIX)gcc \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	clean
	
dsplink_samples:
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE)	-C $(LINK_INSTALL_DIR)/dsplink/gpp/src/samples \
	BASE_TOOLCHAIN=$(CSTOOL_DIR) \
	BASE_CGTOOLS=${CSTOOL_DIR}/bin \
	OSINC_PLATFORM="$(CSTOOL_PREFIX)/lib/gcc/arm-none-linux-gnueabi/$($(CSTOOL_PREFIX) --dumversion)/include" \
	OSINC_TARGET="${CSTOOL_DIR}/target/usr/include" \
	CROSS_COMPILE="$(CSTOOL_PREFIX)" \
	CC=$(CSTOOL_PREFIX)gcc \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	all

dsplink: dsplink_arm dsplink_dsp dsplink_samples

dsplink_clean: dsplink_arm_clean dsplink_dsp_clean dsplink_samples_clean

dsplink_install:
	install -d $(EXEC_DIR)/dsplink
	install $(LINK_INSTALL_DIR)/dsplink/gpp/export/BIN/Linux/DAVINCI/RELEASE/dsplinkk.ko $(EXEC_DIR)/dsplink
	cp ${LINK_INSTALL_DIR}/packages/dsplink/gpp/export/BIN/Linux/DAVINCI/RELEASE/*gpp $(EXEC_DIR)/dsplink
	@for file in $(shell find $(LINK_INSTALL_DIR)/dsplink/dsp/BUILD -name *.out); do \
	cp $$file $(EXEC_DIR)/dsplink ; \
	done

##############################################################################
#  Build audio soc examples
##############################################################################
audio_soc_example:
	$(MAKE) -C ./audio-soc-example_* \
	PLATFORM="$(PLATFORM)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	LINUXKERNEL_INSTALL_DIR="$(LINUXKERNEL_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	BIOSPSP_INSTALL_DIR="$(BIOSPSP_INSTALL_DIR)" \
	EDMA3LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	all

audio_soc_example_clean:
	$(MAKE) -C ./audio-soc-example_* \
	PLATFORM="$(PLATFORM)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	LINUXKERNEL_INSTALL_DIR="$(LINUXKERNEL_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	BIOSPSP_INSTALL_DIR="$(BIOSPSP_INSTALL_DIR)" \
	EDMA3LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	clean

