From 7b284b915301802ad85848641c19a376b2f78a92 Mon Sep 17 00:00:00 2001
From: Vaibhav Hiremath <hvaibhav@ti.com>
Date: Thu, 5 Mar 2009 19:38:31 +0530
Subject: [PATCH 325/364] Power Management working with FBDEV

Following changes done here -

	- Implemented Timer based implementation to support
	  time-out feature for FBDEV Display
	- Added SYSFS entry for configuration of timeout value
	- Created WorkQueue for the idle-resume of FBDEV Display
	- Hooked Resume to Uart serial file (serial.c)

Tested -
This feature has been tested with excluding V4L2 driver and MMC, USB, Sound.
---
 arch/arm/mach-omap2/board-omap3evm.c |   11 ++-
 arch/arm/mach-omap2/serial.c         |    8 ++-
 drivers/video/omap2/omapfb-sysfs.c   |  136 ++++++++++++++++++++++++++++++++++
 3 files changed, 152 insertions(+), 3 deletions(-)
 mode change 100644 => 100755 drivers/video/omap2/omapfb-sysfs.c

diff --git a/arch/arm/mach-omap2/board-omap3evm.c b/arch/arm/mach-omap2/board-omap3evm.c
index 5e9a483..46b4691 100644
--- a/arch/arm/mach-omap2/board-omap3evm.c
+++ b/arch/arm/mach-omap2/board-omap3evm.c
@@ -272,6 +272,9 @@ static struct platform_device omap3evm_vout_device = {
 #define ENABLE_VPLL2_DEDICATED	0x05
 #define ENABLE_VPLL2_DEV_GRP	0xE0
 
+#define TWL_PWMA_PWMAON         0x00
+#define TWL_PWMA_PWMAOFF        0x01
+
 static int lcd_enabled;
 static int dvi_enabled;
 
@@ -338,7 +341,7 @@ err_1:
 static int omap3_evm_panel_enable_lcd(struct omap_display *display)
 {
 	if (dvi_enabled) {
-		printk(KERN_ERR "cannot enable LCD, DVI is enabled\n");
+		printk(KERN_DEBUG "cannot enable LCD, DVI is enabled\n");
 		return -EINVAL;
 	}
 #if defined(CONFIG_TWL4030_CORE)
@@ -348,6 +351,7 @@ static int omap3_evm_panel_enable_lcd(struct omap_display *display)
 		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
 			ENABLE_VPLL2_DEV_GRP, TWL4030_VPLL2_DEV_GRP);
 		twl4030_i2c_write_u8(TWL4030_MODULE_LED, 0x10, TWL4030_LED_EN);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PWMA, 100, TWL_PWMA_PWMAOFF);
 	}
 #endif
 	gpio_direction_output(LCD_PANEL_ENABLE_GPIO, 0);
@@ -364,6 +368,7 @@ static void omap3_evm_panel_disable_lcd(struct omap_display *display)
 		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER, 0x0,
 				TWL4030_VPLL2_DEV_GRP);
 		twl4030_i2c_write_u8(TWL4030_MODULE_LED, 0x11, TWL4030_LED_EN);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PWMA, 0, TWL_PWMA_PWMAOFF);
 	}
 #endif
 	gpio_direction_output(LCD_PANEL_ENABLE_GPIO, 1);
@@ -411,7 +416,7 @@ static struct omap_display_data omap3_evm_display_data_tv = {
 static int omap3_evm_panel_enable_dvi(struct omap_display *display)
 {
 	if (lcd_enabled) {
-		printk(KERN_ERR "cannot enable DVI, LCD is enabled\n");
+		printk(KERN_DEBUG "cannot enable DVI, LCD is enabled\n");
 		return -EINVAL;
 	}
 
@@ -422,6 +427,7 @@ static int omap3_evm_panel_enable_dvi(struct omap_display *display)
 		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
 			ENABLE_VPLL2_DEV_GRP, TWL4030_VPLL2_DEV_GRP);
 		twl4030_i2c_write_u8(TWL4030_MODULE_LED, 0x10, TWL4030_LED_EN);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PWMA, 100, TWL_PWMA_PWMAOFF);
 	}
 	twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0x80,
 			REG_GPIODATADIR1);
@@ -442,6 +448,7 @@ static void omap3_evm_panel_disable_dvi(struct omap_display *display)
 		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER, 0x0,
 				TWL4030_VPLL2_DEV_GRP);
 		twl4030_i2c_write_u8(TWL4030_MODULE_LED, 0x11, TWL4030_LED_EN);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PWMA, 0, TWL_PWMA_PWMAOFF);
 	}
 
 	twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0x00,
diff --git a/arch/arm/mach-omap2/serial.c b/arch/arm/mach-omap2/serial.c
index 90f1c67..bdb98ab 100644
--- a/arch/arm/mach-omap2/serial.c
+++ b/arch/arm/mach-omap2/serial.c
@@ -229,6 +229,8 @@ static inline void omap_uart_disable_clocks(struct omap_uart_state *uart)
 	clk_disable(uart->fck);
 }
 
+extern void omap_dss_resume_idle();
+
 static void omap_uart_block_sleep(struct omap_uart_state *uart)
 {
 	omap_uart_restore(uart);
@@ -236,6 +238,11 @@ static void omap_uart_block_sleep(struct omap_uart_state *uart)
 	omap_uart_smart_idle_enable(uart, 0);
 	uart->can_sleep = 0;
 	mod_timer(&uart->timer, jiffies + uart->timeout);
+	/*
+	 * Hook DSS resume functionlaity here, so that serial
+	 * interrupt will be wake-up event for DSS
+	 */
+	omap_dss_resume_idle();
 }
 
 static void omap_uart_allow_sleep(struct omap_uart_state *uart)
@@ -269,7 +276,6 @@ void omap_uart_prepare_idle(int num)
 		}
 	}
 }
-
 void omap_uart_resume_idle(int num)
 {
 	struct omap_uart_state *uart;
diff --git a/drivers/video/omap2/omapfb-sysfs.c b/drivers/video/omap2/omapfb-sysfs.c
old mode 100644
new mode 100755
index 7161361..0d2d714
--- a/drivers/video/omap2/omapfb-sysfs.c
+++ b/drivers/video/omap2/omapfb-sysfs.c
@@ -27,6 +27,7 @@
 #include <linux/platform_device.h>
 #include <linux/kernel.h>
 
+#include <mach/pm.h>
 #include <mach/display.h>
 #include <mach/omapfb.h>
 
@@ -898,6 +899,113 @@ err:
 	omapfb_unlock(fbdev);
 	return r;
 }
+#ifdef CONFIG_PM
+
+static u32 dss_sleep_timeout = (1 * 20 * HZ);
+static u32 can_sleep = 0;
+static struct omapfb2_device *omap2fb;
+static struct timer_list timer;
+
+struct workqueue_struct *irq_work_queues; /* workqueue*/
+struct work_struct irq_work_queue;              /* work entry */
+/*
+ * Resumes the DSS Module
+ * Here Clocks will be turned-on, Context will be restored
+ */
+void omap_dss_resume_idle()
+{
+	if (can_sleep == 2) {
+		omap2_block_sleep();
+		can_sleep = 3;
+		queue_work(irq_work_queues, &irq_work_queue);
+	}
+}
+EXPORT_SYMBOL(omap_dss_resume_idle);
+/*
+ * Timer Call-back function
+ */
+static void dss_idle_timer(unsigned long data)
+{
+	can_sleep = 1;
+	queue_work(irq_work_queues, &irq_work_queue);
+}
+
+void omap2fb_timeout_handler(struct work_struct *work)
+{
+	int i;
+	DEFINE_WAIT(wait);
+
+	if (can_sleep == 1) {
+		for (i = 0; i < omap2fb->num_displays; i++)
+			omap2fb->displays[i]->disable(omap2fb->displays[i]);
+
+
+		for (i = 0; i < omap2fb->num_fbs; i++)
+			fb_blank(omap2fb->fbs[i], FB_BLANK_POWERDOWN);
+
+		can_sleep = 2;
+		del_timer(&timer);
+		omap2_allow_sleep();
+	} else if (can_sleep == 3){
+		for (i = 0; i < omap2fb->num_displays; i++)
+			omap2fb->displays[i]->enable(omap2fb->displays[i]);
+
+		for (i = 0; i < omap2fb->num_fbs; i++)
+			fb_blank(omap2fb->fbs[i], FB_BLANK_UNBLANK);
+
+		mod_timer(&timer, jiffies + dss_sleep_timeout);
+		can_sleep = 0;
+	}
+}
+/*
+ * Initialize the Timer fofr DSS, configure the timer to default value
+ * of 10 Sec.
+ */
+void dss_init_timer(struct omapfb2_device *fbdev)
+{
+	omap2fb = fbdev;
+	can_sleep = 0;
+	omap2_block_sleep();
+	setup_timer(&timer, dss_idle_timer,
+			(unsigned long) NULL);
+	mod_timer(&timer, jiffies + dss_sleep_timeout);
+
+	/*
+	 * Enable auto-Idle mode here
+	 */
+}
+
+/*
+ * SYSFS entry to show Time-Out value for DSS
+ */
+static ssize_t dss_sleep_show_timeout(struct device *dev,
+                               struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%u\n", dss_sleep_timeout / HZ);
+}
+
+/*
+ * SYSFS entry to reconfigure Time-Out value for DSS
+ */
+static ssize_t dss_sleep_store_timeout(struct device *dev,
+               struct device_attribute *attr, const char *buf, size_t n)
+{
+	unsigned int value;
+
+	if (sscanf(buf, "%u", &value) != 1) {
+		printk(KERN_ERR "sleep_timeout_store: Invalid value\n");
+		return -EINVAL;
+	}
+	if (value == 0) {
+		del_timer(&timer);
+	} else {
+		dss_sleep_timeout = value * HZ;
+		mod_timer(&timer, jiffies + dss_sleep_timeout);
+	}
+
+	return n;
+}
+#endif
 
 
 static DEVICE_ATTR(framebuffers, S_IRUGO | S_IWUSR,
@@ -908,12 +1016,19 @@ static DEVICE_ATTR(managers, S_IRUGO | S_IWUSR,
 		show_managers, store_managers);
 static DEVICE_ATTR(displays, S_IRUGO | S_IWUSR,
 		show_displays, store_displays);
+#ifdef CONFIG_PM
+static DEVICE_ATTR (sleep_timeout, S_IRUGO | S_IWUSR,
+        dss_sleep_show_timeout, dss_sleep_store_timeout);
+#endif
 
 static struct attribute *omapfb_attrs[] = {
 	&dev_attr_framebuffers.attr,
 	&dev_attr_overlays.attr,
 	&dev_attr_managers.attr,
 	&dev_attr_displays.attr,
+#ifdef CONFIG_PM
+	&dev_attr_sleep_timeout.attr,
+#endif
 	NULL,
 };
 
@@ -928,6 +1043,27 @@ void omapfb_create_sysfs(struct omapfb2_device *fbdev)
 	r = sysfs_create_group(&fbdev->dev->kobj, &omapfb_attr_group);
 	if (r)
 		dev_err(fbdev->dev, "failed to create sysfs clk file\n");
+
+
+#ifdef CONFIG_PM
+	/*
+	 * Create Work queue for the FBDEV time out handling.
+	 * This is required since PM and UART are linked up with
+	 * each other under interrupt disable context, and if we tie
+	 * this up with Uart then twl4030 related calls will not work.
+	 * So we need to have seperate Work Queue to handle prepare_idle
+	 * and resume_idle scenarios.
+	 */
+	irq_work_queues = create_singlethread_workqueue("omapfb");
+	if (irq_work_queues == NULL) {
+		printk("Could not create omap2fb workqueue\n");
+		return;
+	}
+	INIT_WORK(&irq_work_queue, omap2fb_timeout_handler);
+
+	dss_init_timer(fbdev);
+#endif
+
 }
 
 void omapfb_remove_sysfs(struct omapfb2_device *fbdev)
-- 
1.6.0.3

