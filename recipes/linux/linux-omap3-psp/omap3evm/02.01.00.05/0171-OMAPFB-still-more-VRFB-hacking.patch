From f41b7839cbfc4363e6c0e8de66e2925b0d497565 Mon Sep 17 00:00:00 2001
From: Tomi Valkeinen <tomi.valkeinen@nokia.com>
Date: Thu, 8 Jan 2009 18:06:13 +0200
Subject: [PATCH 171/364] OMAPFB: still more VRFB hacking

---
 arch/arm/plat-omap/fb-vram.c      |    5 +-
 drivers/video/omap2/omapfb-main.c |  112 +++++++++++++++++++++++++++++--------
 drivers/video/omap2/omapfb.h      |   19 ++++--
 3 files changed, 106 insertions(+), 30 deletions(-)

diff --git a/arch/arm/plat-omap/fb-vram.c b/arch/arm/plat-omap/fb-vram.c
index 4765616..843ecdf 100644
--- a/arch/arm/plat-omap/fb-vram.c
+++ b/arch/arm/plat-omap/fb-vram.c
@@ -57,7 +57,8 @@
 #define SMS_ROT_VIRT_BASE(context, rot) (0x70000000 \
 		| 0x4000000 * (context) \
 		| 0x1000000 * (rot))
-#define VRFB_SIZE              (2048 * 480 * 4)
+//#define VRFB_SIZE              (2048 * 480 * 4)
+#define VRFB_SIZE              (2048 * 640 * 4) // XXX this should be calculated
 #define PAGE_WIDTH_EXP         5 /* Assuming SDRAM pagesize= 1024 */
 #define PAGE_HEIGHT_EXP        5 /* 1024 = 2^5 * 2^5 */
 #define SMS_IMAGEHEIGHT_OFFSET 16
@@ -567,6 +568,8 @@ int omap_vrfb_setup(int ctx, unsigned long paddr, u32 width, u32 height,
 			| page_height_exp << SMS_PH_OFFSET,
 			SMS_ROT_CONTROL(ctx));
 
+	printk("vrfb offset %d, %d\n", vrfb_width - width, vrfb_height - height);
+
 	//vrfb.xoffset = vrfb_width - width;
 	//vrfb.yoffset = vrfb_height - height;
 	return 0;
diff --git a/drivers/video/omap2/omapfb-main.c b/drivers/video/omap2/omapfb-main.c
index bbb5344..4c0873f 100644
--- a/drivers/video/omap2/omapfb-main.c
+++ b/drivers/video/omap2/omapfb-main.c
@@ -37,6 +37,9 @@
 
 static char *def_mode;
 static char *def_vram;
+static int def_rotate = -1;
+
+#define VRFB_WIDTH 2048
 
 #ifdef DEBUG
 unsigned int omapfb_debug;
@@ -57,6 +60,8 @@ static void fill_fb(void *addr, struct fb_info *fbi)
 	int y, x;
 	u8 *p = addr;
 
+	DBG("fill_fb %dx%d, line_len %d\n", w, h, fix->line_length);
+
 	for (y = 0; y < h; y++) {
 		for (x = 0; x < w; x++) {
 			if (var->bits_per_pixel == 16) {
@@ -132,6 +137,8 @@ static void fill_fb(void *addr, struct fb_info *fbi)
 
 		p += bytespp * row_inc;
 	}
+
+	DBG("fill done\n");
 }
 #endif
 
@@ -190,18 +197,26 @@ void set_fb_fix(struct fb_info *fbi)
 {
 	struct fb_fix_screeninfo *fix = &fbi->fix;
 	struct fb_var_screeninfo *var = &fbi->var;
-	struct omapfb2_mem_region *rg = &FB2OFB(fbi)->region;
+	struct omapfb_info *ofbi = FB2OFB(fbi);
+	struct omapfb2_mem_region *rg = &ofbi->region;
 
 	DBG("set_fb_fix\n");
 
 	/* used by open/write in fbmem.c */
-	fbi->screen_base        = (char __iomem *)omapfb_get_region_vaddr(rg);
+	fbi->screen_base = (char __iomem *)omapfb_get_region_vaddr(rg,
+			ofbi->rotation);
 
 
 	/* used by mmap in fbmem.c */
-	fix->line_length = (2048 * var->bits_per_pixel) >> 3;
-	fix->smem_start         = omapfb_get_region_paddr(rg);
-	fix->smem_len           = var->yres_virtual * fix->line_length;
+	if (ofbi->rotation == -1)
+		fix->line_length = (var->xres_virtual * var->bits_per_pixel) >> 3;
+	else
+		fix->line_length = (VRFB_WIDTH * var->bits_per_pixel) >> 3;
+	fix->smem_start = omapfb_get_region_paddr(rg, ofbi->rotation);
+	if (ofbi->rotation == -1)
+		fix->smem_len = rg->size;
+	else
+		fix->smem_len = var->yres_virtual * fix->line_length;
 
 	fix->type = FB_TYPE_PACKED_PIXELS;
 
@@ -230,10 +245,21 @@ void set_fb_fix(struct fb_info *fbi)
 	fix->xpanstep = 1;
 	fix->ypanstep = 1;
 
-	if (rg->size)
+	if (rg->size) {
+		int w, h;
+
+		if (ofbi->rotation == 1 || ofbi->rotation == 3) {
+			w = var->yres_virtual;
+			h = var->xres_virtual;
+		} else {
+			w = var->xres_virtual;
+			h = var->yres_virtual;
+		}
+
 		omap_vrfb_setup(rg->vrfb.context, rg->_paddr,
-				var->xres_virtual, var->yres_virtual,
+				w, h,
 				var->bits_per_pixel / 8);
+	}
 }
 
 /* check new var and possibly modify it to be ok */
@@ -294,9 +320,16 @@ int check_fb_var(struct fb_info *fbi, struct fb_var_screeninfo *var)
 	}
 
 	xres_min = OMAPFB_PLANE_XRES_MIN;
-	xres_max = (display ? display->panel->timings.x_res : 2048) - ovl->info.pos_x;
 	yres_min = OMAPFB_PLANE_YRES_MIN;
-	yres_max = (display ? display->panel->timings.y_res : 2048) - ovl->info.pos_y;
+
+	if (ofbi->rotation == 1 || ofbi->rotation == 3) {
+		/* XXX pos_x/y affects? */
+		xres_max = (display ? display->panel->timings.y_res : 2048) - ovl->info.pos_x;
+		yres_max = (display ? display->panel->timings.x_res : 2048) - ovl->info.pos_y;
+	} else {
+		xres_max = (display ? display->panel->timings.x_res : 2048) - ovl->info.pos_x;
+		yres_max = (display ? display->panel->timings.y_res : 2048) - ovl->info.pos_y;
+	}
 
 	if (var->xres < xres_min)
 		var->xres = xres_min;
@@ -453,6 +486,7 @@ int omapfb_setup_overlay(struct fb_info *fbi, struct omap_overlay *ovl,
 	int offset;
 	u32 data_start_p;
 	void *data_start_v;
+	int xres, yres;
 
 	DBG("setup_overlay %d\n", ofbi->id);
 
@@ -465,11 +499,14 @@ int omapfb_setup_overlay(struct fb_info *fbi, struct omap_overlay *ovl,
 	offset = ((var->yoffset * var->xres_virtual +
 				var->xoffset) * var->bits_per_pixel) >> 3;
 
-	data_start_p = omapfb_get_region_paddr(&ofbi->region);
-	data_start_v = omapfb_get_region_vaddr(&ofbi->region);
-
-	data_start_p = ofbi->region.vrfb.paddr[0];
-	data_start_v = ofbi->region.vrfb.vaddr[0];
+	if (ofbi->rotation == -1) {
+		data_start_p = omapfb_get_region_paddr(&ofbi->region, -1);
+		data_start_v = omapfb_get_region_vaddr(&ofbi->region, -1);
+	} else {
+		/* setup DSS's view to always 0 degrees */
+		data_start_p = omapfb_get_region_paddr(&ofbi->region, 0);
+		data_start_v = omapfb_get_region_vaddr(&ofbi->region, 0);
+	}
 
 	data_start_p += offset;
 	data_start_v += offset;
@@ -481,10 +518,22 @@ int omapfb_setup_overlay(struct fb_info *fbi, struct omap_overlay *ovl,
 		goto err;
 	}
 
+	if (ofbi->rotation == 1 || ofbi->rotation == 3) {
+		int tmp;
+		xres = var->yres;
+		yres = var->xres;
+		tmp = outw;
+		outw = outh;
+		outh = tmp;
+	} else {
+		xres = var->xres;
+		yres = var->yres;
+	}
+
 	r = ovl->setup_input(ovl,
 			data_start_p, data_start_v,
-			2048, //var->xres_virtual,
-			var->xres, var->yres,
+			ofbi->rotation == -1 ? var->xres_virtual : VRFB_WIDTH,
+			xres, yres,
 			mode);
 
 	if (r)
@@ -656,13 +705,19 @@ static int omapfb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)
 		return -EINVAL;
 	off = vma->vm_pgoff << PAGE_SHIFT;
 
-	start = omapfb_get_region_paddr(rg);
-	len = fix->smem_len;//rg->size;
+	start = omapfb_get_region_paddr(rg, ofbi->rotation);
+	if (ofbi->rotation == -1)
+		len = rg->size;
+	else
+		len = fix->smem_len;
 	if (off >= len)
 		return -EINVAL;
 	if ((vma->vm_end - vma->vm_start + off) > len)
 		return -EINVAL;
+
 	off += start;
+	DBG("mmap region start %lx, len %d, off %lx\n", start, len, off);
+
 	vma->vm_pgoff = off >> PAGE_SHIFT;
 	vma->vm_flags |= VM_IO | VM_RESERVED;
 	vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
@@ -849,7 +904,7 @@ static struct fb_ops omapfb_ops = {
 	.fb_mmap	= omapfb_mmap,
 	.fb_setcolreg	= omapfb_setcolreg,
 	.fb_setcmap	= omapfb_setcmap,
-	.fb_write	= omapfb_write,
+	//.fb_write	= omapfb_write,
 };
 
 static void omapfb_free_fbmem(struct omapfb2_device *fbdev, int fbnum)
@@ -1048,6 +1103,7 @@ static int fbinfo_init(struct omapfb2_device *fbdev, struct fb_info *fbi)
 	struct fb_var_screeninfo *var = &fbi->var;
 	struct fb_fix_screeninfo *fix = &fbi->fix;
 	struct omap_display *display = fb2display(fbi);
+	struct omapfb_info *ofbi = FB2OFB(fbi);
 	int r = 0;
 
 	fbi->fbops = &omapfb_ops;
@@ -1058,12 +1114,20 @@ static int fbinfo_init(struct omapfb2_device *fbdev, struct fb_info *fbi)
 
 	var->nonstd = 0;
 
+	printk("ROTATE %d\n", def_rotate);
+
+	ofbi->rotation = def_rotate;
+
 	if (display) {
-		var->xres = display->panel->timings.x_res;
-		var->yres = display->panel->timings.y_res;
+		if (ofbi->rotation == 1 || ofbi->rotation == 3) {
+			var->yres = display->panel->timings.x_res;
+			var->xres = display->panel->timings.y_res;
+		} else {
+			var->xres = display->panel->timings.x_res;
+			var->yres = display->panel->timings.y_res;
+		}
 		var->xres_virtual = var->xres;
 		var->yres_virtual = var->yres;
-		/*        var->rotate       = def_rotate; */
 
 		switch (display->panel->bpp) {
 		case 16:
@@ -1089,7 +1153,8 @@ static int fbinfo_init(struct omapfb2_device *fbdev, struct fb_info *fbi)
 
 #ifdef DEBUG
 	if (omapfb_debug && FB2OFB(fbi)->region.size > 0)
-		fill_fb(omapfb_get_region_vaddr(&FB2OFB(fbi)->region), fbi);
+		fill_fb(omapfb_get_region_vaddr(&ofbi->region, ofbi->rotation),
+				fbi);
 #endif
 err:
 	return r;
@@ -1461,6 +1526,7 @@ static void __exit omapfb_exit(void)
 
 module_param_named(video_mode, def_mode, charp, 0);
 module_param_named(vram, def_vram, charp, 0);
+module_param_named(rotate, def_rotate, int, 0);
 
 /* late_initcall to let panel/ctrl drivers loaded first.
  * I guess better option would be a more dynamic approach,
diff --git a/drivers/video/omap2/omapfb.h b/drivers/video/omap2/omapfb.h
index 0f5257c..1138547 100644
--- a/drivers/video/omap2/omapfb.h
+++ b/drivers/video/omap2/omapfb.h
@@ -51,16 +51,22 @@ struct omapfb2_mem_region {
 	unsigned	map:1;		/* kernel mapped by the driver */
 };
 
-static inline u32 omapfb_get_region_paddr(struct omapfb2_mem_region *region)
+static inline u32 omapfb_get_region_paddr(struct omapfb2_mem_region *region,
+		int rotation)
 {
-	return region->vrfb.paddr[0]; // XXX always return 180 rotated
-//	return region->_paddr;
+	if (rotation == -1)
+		return region->_paddr;
+	else
+		return region->vrfb.paddr[rotation];
 }
 
-static inline void *omapfb_get_region_vaddr(struct omapfb2_mem_region *region)
+static inline void *omapfb_get_region_vaddr(struct omapfb2_mem_region *region,
+		int rotation)
 {
-	return region->vrfb.vaddr[0]; // XXX always return 180 rotated
-	//return region->_vaddr;
+	if (rotation == -1)
+		return region->_vaddr;
+	else
+		return region->vrfb.vaddr[rotation];
 }
 
 /* appended to fb_info */
@@ -71,6 +77,7 @@ struct omapfb_info {
 	int num_overlays;
 	struct omap_overlay *overlays[OMAPFB_MAX_OVL_PER_FB];
 	struct omapfb2_device *fbdev;
+	int rotation;
 };
 
 struct omapfb2_device {
-- 
1.6.0.3

