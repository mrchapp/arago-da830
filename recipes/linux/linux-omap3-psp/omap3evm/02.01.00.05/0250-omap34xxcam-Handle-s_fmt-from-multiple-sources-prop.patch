From 654556c19e2c22086754e10f71c0dc60128a9213 Mon Sep 17 00:00:00 2001
From: Sergio Aguirre <saaguirre@ti.com>
Date: Mon, 26 Jan 2009 15:19:33 -0600
Subject: [PATCH 250/364] omap34xxcam: Handle s_fmt from multiple sources properly.

Signed-off-by: Sakari Ailus <sakari.ailus@nokia.com>
---
 drivers/media/video/omap34xxcam.c |   48 +++++++++++++++++++-----------------
 drivers/media/video/omap34xxcam.h |   17 ++++--------
 2 files changed, 31 insertions(+), 34 deletions(-)

diff --git a/drivers/media/video/omap34xxcam.c b/drivers/media/video/omap34xxcam.c
index 80bc5dd..70b6ae4 100644
--- a/drivers/media/video/omap34xxcam.c
+++ b/drivers/media/video/omap34xxcam.c
@@ -201,6 +201,7 @@ static int omap34xxcam_vbq_setup(struct videobuf_queue *vbq, unsigned int *cnt,
 				 unsigned int *size)
 {
 	struct omap34xxcam_fh *fh = vbq->priv_data;
+	struct omap34xxcam_videodev *vdev = fh->vdev;
 
 	if (*cnt <= 0)
 		*cnt = VIDEO_MAX_FRAME;	/* supply a default number of buffers */
@@ -208,7 +209,7 @@ static int omap34xxcam_vbq_setup(struct videobuf_queue *vbq, unsigned int *cnt,
 	if (*cnt > VIDEO_MAX_FRAME)
 		*cnt = VIDEO_MAX_FRAME;
 
-	*size = fh->pix.sizeimage;
+	*size = vdev->pix.sizeimage;
 
 	while (*size * *cnt > fh->vdev->vdev_sensor_config.capture_mem)
 		(*cnt)--;
@@ -254,6 +255,7 @@ static int omap34xxcam_vbq_prepare(struct videobuf_queue *vbq,
 				   enum v4l2_field field)
 {
 	struct omap34xxcam_fh *fh = vbq->priv_data;
+	struct omap34xxcam_videodev *vdev = fh->vdev;
 	int err = 0;
 
 	/*
@@ -262,12 +264,12 @@ static int omap34xxcam_vbq_prepare(struct videobuf_queue *vbq,
 	 */
 	if (vb->baddr) {
 		/* This is a userspace buffer. */
-		if (fh->pix.sizeimage > vb->bsize)
+		if (vdev->pix.sizeimage > vb->bsize)
 			/* The buffer isn't big enough. */
 			return -EINVAL;
 	} else {
 		if (vb->state != VIDEOBUF_NEEDS_INIT
-		    && fh->pix.sizeimage > vb->bsize)
+		    && vdev->pix.sizeimage > vb->bsize)
 			/*
 			 * We have a kernel bounce buffer that has
 			 * already been allocated.
@@ -275,9 +277,9 @@ static int omap34xxcam_vbq_prepare(struct videobuf_queue *vbq,
 			omap34xxcam_vbq_release(vbq, vb);
 	}
 
-	vb->size = fh->pix.bytesperline * fh->pix.height;
-	vb->width = fh->pix.width;
-	vb->height = fh->pix.height;
+	vb->size = vdev->pix.bytesperline * vdev->pix.height;
+	vb->width = vdev->pix.width;
+	vb->height = vdev->pix.height;
 	vb->field = field;
 
 	if (vb->state == VIDEOBUF_NEEDS_INIT) {
@@ -294,7 +296,6 @@ static int omap34xxcam_vbq_prepare(struct videobuf_queue *vbq,
 		omap34xxcam_vbq_release(vbq, vb);
 
 	return err;
-
 }
 
 /**
@@ -403,7 +404,7 @@ static int vidioc_g_fmt_vid_cap(struct file *file, void *fh,
 	struct omap34xxcam_videodev *vdev = ofh->vdev;
 
 	mutex_lock(&vdev->mutex);
-	f->fmt.pix = ofh->pix;
+	f->fmt.pix = vdev->pix;
 	mutex_unlock(&vdev->mutex);
 
 	return 0;
@@ -619,17 +620,12 @@ static int vidioc_s_fmt_vid_cap(struct file *file, void *fh,
 	timeperframe = vdev->want_timeperframe;
 
 	rval = s_pix_parm(vdev, &pix_tmp, &f->fmt.pix, &timeperframe);
-	pix_tmp = f->fmt.pix;
+	if (!rval)
+		vdev->pix = f->fmt.pix;
 
 out:
 	mutex_unlock(&vdev->mutex);
 
-	if (!rval) {
-		mutex_lock(&ofh->vbq.vb_lock);
-		ofh->pix = pix_tmp;
-		mutex_unlock(&ofh->vbq.vb_lock);
-	}
-
 	return rval;
 }
 
@@ -699,10 +695,10 @@ static int vidioc_reqbufs(struct file *file, void *fh,
 		return -EBUSY;
 	}
 
-	mutex_unlock(&vdev->mutex);
-
 	rval = videobuf_reqbufs(&ofh->vbq, b);
 
+	mutex_unlock(&vdev->mutex);
+
 	/*
 	 * Either videobuf_reqbufs failed or the buffers are not
 	 * memory-mapped (which would need special attention).
@@ -1227,7 +1223,6 @@ static int vidioc_s_crop(struct file *file, void *fh, struct v4l2_crop *a)
 {
 	struct omap34xxcam_fh *ofh = fh;
 	struct omap34xxcam_videodev *vdev = ofh->vdev;
-	struct v4l2_pix_format *pix = &ofh->pix;
 	int rval = 0;
 
 	mutex_lock(&vdev->mutex);
@@ -1235,7 +1230,7 @@ static int vidioc_s_crop(struct file *file, void *fh, struct v4l2_crop *a)
 	if (vdev->vdev_sensor_config.sensor_isp)
 		rval = vidioc_int_s_crop(vdev->vdev_sensor, a);
 	else
-		rval = isp_s_crop(a, pix);
+		rval = isp_s_crop(a, &vdev->pix);
 
 	mutex_unlock(&vdev->mutex);
 
@@ -1520,14 +1515,21 @@ static int omap34xxcam_open(struct file *file)
 	} else {
 		struct v4l2_format f;
 
-		vidioc_int_g_fmt_cap(vdev->vdev_sensor, &f);
+		if (vidioc_int_g_fmt_cap(vdev->vdev_sensor, &f)) {
+			dev_err(cam->dev,
+				"can't get current pix from sensor!\n");
+			goto out_slave_power_set_standby;
+		}
 		format = f;
-		isp_s_fmt_cap(&f.fmt.pix, &format.fmt.pix);
+		if (isp_s_fmt_cap(&f.fmt.pix, &format.fmt.pix)) {
+			dev_err(cam->dev,
+				"isp doesn't like the sensor!\n");
+			goto out_slave_power_set_standby;
+		}
 	}
+	vdev->pix = format.fmt.pix;
 
 	mutex_unlock(&vdev->mutex);
-	/* FIXME: how about fh->pix when there are more users? */
-	fh->pix = format.fmt.pix;
 
 	file->private_data = fh;
 
diff --git a/drivers/media/video/omap34xxcam.h b/drivers/media/video/omap34xxcam.h
index a62bb52..fa096da 100644
--- a/drivers/media/video/omap34xxcam.h
+++ b/drivers/media/video/omap34xxcam.h
@@ -116,6 +116,9 @@ struct omap34xxcam_hw_config {
  * @sensor_config: ISP-speicific sensor configuration
  * @lens_config: ISP-speicific lens configuration
  * @flash_config: ISP-speicific flash configuration
+ * @want_timeperframe: Desired timeperframe
+ * @want_pix: Desired pix
+ * @pix: Current pix
  * @streaming: streaming file handle, if streaming is enabled
  */
 struct omap34xxcam_videodev {
@@ -137,12 +140,6 @@ struct omap34xxcam_videodev {
 	int capture_mem;
 
 	/*** general driver state information ***/
-	/*
-	 * Sensor interface parameters: interface type, CC_CTRL
-	 * register value and interface specific data.
-	 */
-	u32 xclk;
-	/* index to omap34xxcam_videodevs of this structure */
 	int index;
 	atomic_t users;
 	enum v4l2_power power_state[OMAP34XXCAM_SLAVE_FLASH + 1];
@@ -157,10 +154,11 @@ struct omap34xxcam_videodev {
 	struct omap34xxcam_hw_config slave_config[OMAP34XXCAM_SLAVE_FLASH + 1];
 
 	/*** capture data ***/
+	struct file *streaming;
 	struct v4l2_fract want_timeperframe;
 	struct v4l2_pix_format want_pix;
-	/* file handle, if streaming is on */
-	struct file *streaming;
+	spinlock_t pix_lock;
+	struct v4l2_pix_format pix;
 };
 
 /**
@@ -199,16 +197,13 @@ struct omap34xxcam_device {
  * struct omap34xxcam_fh - per-filehandle data structure
  * @vbq_lock: spinlock for the videobuf queue
  * @vbq: V4L2 video buffer queue structure
- * @pix: V4L2 pixel format structure (serialise pix by vbq->lock)
  * @field_count: field counter for videobuf_buffer
  * @vdev: our /dev/video specific structure
  */
 struct omap34xxcam_fh {
 	spinlock_t vbq_lock; /* spinlock for the videobuf queue */
 	struct videobuf_queue vbq;
-	struct v4l2_pix_format pix;
 	atomic_t field_count;
-	/* accessing cam here doesn't need serialisation: it's constant */
 	struct omap34xxcam_videodev *vdev;
 };
 
-- 
1.6.0.3

