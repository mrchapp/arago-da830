From 970ed008d7e927089a9de22db50597a23f99787e Mon Sep 17 00:00:00 2001
From: Sanjeev Premi <premi@ti.com>
Date: Sun, 15 Mar 2009 22:32:19 +0530
Subject: [PATCH 361/426] PM : cpuidle - Update statistics for correct state

When 'enable_off_mode' is 0, and (mpu_state < PWRDM_POWER_RET)
the local variables mpu_state and core_state are modified; but
the usage count for the original state selected by the governor
are updated.

This patch updates the 'last_state' in the cpuidle driver to ensure
that statistics for the correct state are updated.

When the OFF mode is disabled, all the states where MPU can go to
OFF are disabled.
(cherry picked from commit cc3518c8a66524505db1ff4fd3a8ab4488c1a74f)
---
 arch/arm/mach-omap2/cpuidle34xx.c |   57 ++++++++++++++++++++++++++++++------
 arch/arm/mach-omap2/pm.c          |   16 ++++++++++
 2 files changed, 63 insertions(+), 10 deletions(-)

diff --git a/arch/arm/mach-omap2/cpuidle34xx.c b/arch/arm/mach-omap2/cpuidle34xx.c
index 5d37229..6fb03cf 100644
--- a/arch/arm/mach-omap2/cpuidle34xx.c
+++ b/arch/arm/mach-omap2/cpuidle34xx.c
@@ -91,23 +91,37 @@ static int omap3_enter_idle(struct cpuidle_device *dev,
 {
 	struct omap3_processor_cx *cx = cpuidle_get_statedata(state);
 	struct timespec ts_preidle, ts_postidle, ts_idle;
-	u32 mpu_state = cx->mpu_state, core_state = cx->core_state;
-
-	current_cx_state = *cx;
+	u32 mpu_state, core_state;
+	u8 idx;
 
 	/* Used to keep track of the total time in idle */
 	getnstimeofday(&ts_preidle);
 
+	/*
+	 * Check if the chosen idle state is valid.
+	 * If no, drop down to a lower valid state.
+	 *
+	 * (Expects the lowest idle state to be always VALID).
+	 */
+	if (!cx->valid) {
+		for (idx = (cx->type - 1); idx > OMAP3_STATE_C1; idx--) {
+			if (omap3_power_states[idx].valid)
+				break;
+		}
+		state = &(dev->states[idx]);
+		dev->last_state = state ;
+
+		cx = cpuidle_get_statedata(state);
+	}
+
+	current_cx_state = *cx;
+
+	mpu_state = cx->mpu_state;
+	core_state = cx->core_state;
+
 	local_irq_disable();
 	local_fiq_disable();
 
-	if (!enable_off_mode) {
-		if (mpu_state < PWRDM_POWER_RET)
-			mpu_state = PWRDM_POWER_RET;
-		if (core_state < PWRDM_POWER_RET)
-			core_state = PWRDM_POWER_RET;
-	}
-
 	pwrdm_set_next_pwrst(mpu_pd, mpu_state);
 	pwrdm_set_next_pwrst(core_pd, core_state);
 
@@ -160,6 +174,26 @@ static int omap3_enter_idle_bm(struct cpuidle_device *dev,
 	return omap3_enter_idle(dev, new_state);
 }
 
+/**
+ * omap3_toggle_off_states - Enable / Disable validity of idle states
+ * @flag: Enable/ Disable support for OFF mode
+ *
+ * Called as result of change to "enable_off_mode".
+ */
+void omap3_toggle_off_states(unsigned short flag)
+{
+	if (flag) {
+		omap3_power_states[OMAP3_STATE_C4].valid = 1;
+		omap3_power_states[OMAP3_STATE_C6].valid = 1;
+		omap3_power_states[OMAP3_STATE_C7].valid = 1;
+	}
+	else {
+		omap3_power_states[OMAP3_STATE_C4].valid = 0;
+		omap3_power_states[OMAP3_STATE_C6].valid = 0;
+		omap3_power_states[OMAP3_STATE_C7].valid = 0;
+	}
+}
+
 DEFINE_PER_CPU(struct cpuidle_device, omap3_idle_dev);
 
 /* omap3_init_power_states - Initialises the OMAP3 specific C states.
@@ -302,6 +336,9 @@ int omap3_idle_init(void)
 		return -EINVAL;
 	dev->state_count = count;
 
+	if (cpu_is_omap34xx())
+		omap3_toggle_off_states(enable_off_mode);
+
 	if (cpuidle_register_device(dev)) {
 		printk(KERN_ERR "%s: CPUidle register device failed\n",
 		       __func__);
diff --git a/arch/arm/mach-omap2/pm.c b/arch/arm/mach-omap2/pm.c
index e89fd11..b695c98 100644
--- a/arch/arm/mach-omap2/pm.c
+++ b/arch/arm/mach-omap2/pm.c
@@ -50,6 +50,10 @@ unsigned short enable_off_mode;
 unsigned short voltage_off_while_idle;
 atomic_t sleep_block = ATOMIC_INIT(0);
 
+#ifdef CONFIG_CPU_IDLE
+extern void omap3_toggle_off_states(unsigned short);
+#endif
+
 static ssize_t idle_show(struct kobject *, struct kobj_attribute *, char *);
 static ssize_t idle_store(struct kobject *k, struct kobj_attribute *,
 			  const char *buf, size_t n);
@@ -115,6 +119,10 @@ static ssize_t idle_store(struct kobject *kobj, struct kobj_attribute *attr,
 	} else if (attr == &enable_off_mode_attr) {
 		enable_off_mode = value;
 		omap3_pm_off_mode_enable(enable_off_mode);
+#ifdef CONFIG_CPU_IDLE
+		if (cpu_is_omap34xx())
+			omap3_toggle_off_states(value);
+#endif
 	} else if (attr == &voltage_off_while_idle_attr) {
 		voltage_off_while_idle = value;
 		if (voltage_off_while_idle)
@@ -260,6 +268,14 @@ static int __init omap_pm_init(void)
 		printk(KERN_ERR "sysfs_create_file failed: %d\n", error);
 		return error;
 	}
+
+#ifdef CONFIG_CPU_IDLE
+	enable_off_mode = 0;
+
+	if (cpu_is_omap34xx())
+		omap3_toggle_off_states(enable_off_mode);
+#endif
+
 #ifdef CONFIG_OMAP_PM_SRF
 	error = sysfs_create_file(power_kobj,
 				  &vdd1_opp_attr.attr);
-- 
1.6.2.4

