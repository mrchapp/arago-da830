From 2fb9ec3cfa97157f47938abca5a8e7bac23d7875 Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Fri, 9 Jan 2009 13:18:31 +0530
Subject: [PATCH 014/193] 010-sdma-on-all-rx-channels.patch

---
 drivers/usb/musb/Kconfig     |    8 +++
 drivers/usb/musb/musbhsdma.c |  139 +++++++++++++++++++++++++++++++++++-------
 drivers/usb/musb/musbhsdma.h |   19 ++++++
 3 files changed, 143 insertions(+), 23 deletions(-)

diff --git a/drivers/usb/musb/Kconfig b/drivers/usb/musb/Kconfig
index 5af7379..669acbe 100644
--- a/drivers/usb/musb/Kconfig
+++ b/drivers/usb/musb/Kconfig
@@ -154,6 +154,14 @@ config USB_INVENTRA_DMA
 	help
 	  Enable DMA transfers using Mentor's engine.
 
+config MUSB_USE_SYSTEM_DMA_RX
+	bool 'Use System DMA for RX endpoints'
+	depends on USB_MUSB_HDRC && USB_INVENTRA_DMA
+	help
+	  MUSB RTL version 1.4 has a hardware issue when TX and RX DMA
+	  channels are simultaneously enabled. To work around this issue,
+	  you can choose to use System DMA for RX channels.
+
 config USB_TI_CPPI_DMA
 	bool
 	depends on USB_MUSB_HDRC && !MUSB_PIO_ONLY
diff --git a/drivers/usb/musb/musbhsdma.c b/drivers/usb/musb/musbhsdma.c
index 75b15ce..ae71798 100644
--- a/drivers/usb/musb/musbhsdma.c
+++ b/drivers/usb/musb/musbhsdma.c
@@ -35,6 +35,7 @@
 #include <linux/platform_device.h>
 #include "musb_core.h"
 #include "musbhsdma.h"
+#include <asm/dma.h>
 
 static int dma_controller_start(struct dma_controller *c)
 {
@@ -42,6 +43,41 @@ static int dma_controller_start(struct dma_controller *c)
 	return 0;
 }
 
+static void musb_sysdma_completion(int lch, u16 ch_status, void *data)
+{
+	u32 addr;
+	unsigned long flags;
+
+	struct dma_channel *channel;
+
+	struct musb_dma_channel *musb_channel =
+					(struct musb_dma_channel *) data;
+	struct musb_dma_controller *controller = musb_channel->controller;
+	struct musb *musb = controller->private_data;
+	channel = &musb_channel->channel;
+
+	DBG(2, "lch = 0x%d, ch_status = 0x%x\n", lch, ch_status);
+	spin_lock_irqsave(&musb->lock, flags);
+
+	addr = (u32) omap_get_dma_dst_pos(musb_channel->sysdma_channel);
+	if (musb_channel->len == 0)
+		channel->actual_len = 0;
+	else
+		channel->actual_len = addr - musb_channel->start_addr;
+
+	DBG(2, "ch %p, 0x%x -> 0x%x (%d / %d) %s\n",
+		channel, musb_channel->start_addr, addr,
+		channel->actual_len, musb_channel->len,
+		(channel->actual_len < musb_channel->len) ?
+		"=> reconfig 0 " : " => complete");
+
+	channel->status = MUSB_DMA_STATUS_FREE;
+	musb_dma_completion(musb, musb_channel->epnum, musb_channel->transmit);
+
+	spin_unlock_irqrestore(&musb->lock, flags);
+	return;
+}
+
 static void dma_channel_release(struct dma_channel *channel);
 
 static int dma_controller_stop(struct dma_controller *c)
@@ -94,6 +130,26 @@ static struct dma_channel *dma_channel_allocate(struct dma_controller *c,
 			/* Tx => mode 1; Rx => mode 0 */
 			channel->desired_mode = transmit;
 			channel->actual_len = 0;
+			musb_channel->sysdma_channel = -1;
+
+			if (!transmit && use_system_dma()) {
+				int ret;
+				ret = omap_request_dma(OMAP24XX_DMA_NO_DEVICE,
+					"MUSB SysDMA", musb_sysdma_completion,
+					(void *) musb_channel,
+					&(musb_channel->sysdma_channel));
+
+				if (ret) {
+					printk(KERN_ERR "request_dma failed:"
+							" %d\n", ret);
+					controller->used_channels &=
+								~(1 << bit);
+					channel->status =
+							MUSB_DMA_STATUS_UNKNOWN;
+					musb_channel->sysdma_channel = -1;
+					channel = NULL;
+				}
+			}
 			break;
 		}
 	}
@@ -113,6 +169,12 @@ static void dma_channel_release(struct dma_channel *channel)
 		~(1 << musb_channel->idx);
 
 	channel->status = MUSB_DMA_STATUS_UNKNOWN;
+
+	if (musb_channel->sysdma_channel != -1) {
+		omap_stop_dma(musb_channel->sysdma_channel);
+		omap_free_dma(musb_channel->sysdma_channel);
+		musb_channel->sysdma_channel = -1;
+	}
 }
 
 static void configure_channel(struct dma_channel *channel,
@@ -128,29 +190,57 @@ static void configure_channel(struct dma_channel *channel,
 	DBG(4, "%p, pkt_sz %d, addr 0x%x, len %d, mode %d\n",
 			channel, packet_sz, dma_addr, len, mode);
 
-	if (packet_sz >= 64)
-		csr |= MUSB_HSDMA_BURSTMODE_INCR16;
-	else if (packet_sz >= 32)
-		csr |= MUSB_HSDMA_BURSTMODE_INCR8;
-	else if (packet_sz >= 16)
-		csr |= MUSB_HSDMA_BURSTMODE_INCR4;
-
-	csr |= (musb_channel->epnum << MUSB_HSDMA_ENDPOINT_SHIFT)
-		| MUSB_HSDMA_MODE1
-		| MUSB_HSDMA_ENABLE
-		| MUSB_HSDMA_IRQENABLE
-		| (musb_channel->transmit
-				? MUSB_HSDMA_TRANSMIT
-				: 0);
-
-	/* address/count */
-	musb_write_hsdma_addr(mbase, bchannel, dma_addr);
-	musb_write_hsdma_count(mbase, bchannel, len);
-
-	/* control (this should start things) */
-	musb_writew(mbase,
-		MUSB_HSDMA_CHANNEL_OFFSET(bchannel, MUSB_HSDMA_CONTROL),
-		csr);
+	if (musb_channel->sysdma_channel != -1) {
+		/* System DMA */
+		/* RX: set src = FIFO */
+		omap_set_dma_transfer_params(musb_channel->sysdma_channel,
+					OMAP_DMA_DATA_TYPE_S8,
+					len ? len : 1, 1, /* One frame */
+					OMAP_DMA_SYNC_ELEMENT,
+					OMAP24XX_DMA_NO_DEVICE,
+					0); /* Src Sync */
+
+		omap_set_dma_src_params(musb_channel->sysdma_channel, 0,
+					OMAP_DMA_AMODE_CONSTANT,
+					MUSB_FIFO_ADDRESS(musb_channel->epnum),
+					0, 0);
+
+		omap_set_dma_dest_params(musb_channel->sysdma_channel, 0,
+					OMAP_DMA_AMODE_POST_INC, dma_addr,
+					0, 0);
+
+		omap_set_dma_dest_data_pack(musb_channel->sysdma_channel, 1);
+		omap_set_dma_dest_burst_mode(musb_channel->sysdma_channel,
+					OMAP_DMA_DATA_BURST_16);
+
+		omap_start_dma(musb_channel->sysdma_channel);
+
+	} else { /* Mentor DMA */
+
+		if (packet_sz >= 64)
+			csr |= MUSB_HSDMA_BURSTMODE_INCR16;
+		else if (packet_sz >= 32)
+			csr |= MUSB_HSDMA_BURSTMODE_INCR8;
+		else if (packet_sz >= 16)
+			csr |= MUSB_HSDMA_BURSTMODE_INCR4;
+
+		csr |= (musb_channel->epnum << MUSB_HSDMA_ENDPOINT_SHIFT)
+			| MUSB_HSDMA_MODE1
+			| MUSB_HSDMA_ENABLE
+			| MUSB_HSDMA_IRQENABLE
+			| (musb_channel->transmit
+					? MUSB_HSDMA_TRANSMIT
+					: 0);
+
+		/* address/count */
+		musb_write_hsdma_addr(mbase, bchannel, dma_addr);
+		musb_write_hsdma_count(mbase, bchannel, len);
+
+		/* control (this should start things) */
+		musb_writew(mbase,
+			MUSB_HSDMA_CHANNEL_OFFSET(bchannel, MUSB_HSDMA_CONTROL),
+			csr);
+	}
 }
 
 static int dma_channel_program(struct dma_channel *channel,
@@ -199,6 +289,9 @@ static int dma_channel_abort(struct dma_channel *channel)
 				MUSB_EP_OFFSET(musb_channel->epnum, MUSB_TXCSR),
 				csr);
 		} else {
+			if (musb_channel->sysdma_channel != -1)
+				omap_stop_dma(musb_channel->sysdma_channel);
+
 			csr = musb_readw(mbase,
 				MUSB_EP_OFFSET(musb_channel->epnum,
 						MUSB_RXCSR));
diff --git a/drivers/usb/musb/musbhsdma.h b/drivers/usb/musb/musbhsdma.h
index fb8fcd1..512ddda 100644
--- a/drivers/usb/musb/musbhsdma.h
+++ b/drivers/usb/musb/musbhsdma.h
@@ -35,6 +35,21 @@
 #include "omap2430.h"
 #endif
 
+#if defined(CONFIG_ARCH_OMAP2430) || defined(CONFIG_ARCH_OMAP3430)
+#include "omap2430.h"
+#endif
+
+#ifdef CONFIG_MUSB_USE_SYSTEM_DMA_RX
+static int use_sdma = 1;
+#else
+#define use_sdma          0
+#endif
+
+int use_system_dma(void)
+{
+	return use_sdma;
+}
+
 #ifndef CONFIG_BLACKFIN
 
 #define MUSB_HSDMA_BASE		0x200
@@ -125,6 +140,9 @@ static inline void musb_write_hsdma_count(void __iomem *mbase,
 
 #define MUSB_HSDMA_CHANNELS		8
 
+#define MUSB_FIFO_ADDRESS(epnum)      \
+	((unsigned long) (OMAP_HSOTG_BASE + MUSB_FIFO_OFFSET(epnum)))
+
 struct musb_dma_controller;
 
 struct musb_dma_channel {
@@ -136,6 +154,7 @@ struct musb_dma_channel {
 	u8				idx;
 	u8				epnum;
 	u8				transmit;
+	int                             sysdma_channel;
 };
 
 struct musb_dma_controller {
-- 
1.5.6

