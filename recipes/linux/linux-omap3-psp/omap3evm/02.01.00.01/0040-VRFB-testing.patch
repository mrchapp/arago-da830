From 1f3d259ec3221cd02b77c4c27ba3151405b22bd8 Mon Sep 17 00:00:00 2001
From: Tomi Valkeinen <tomi.valkeinen@nokia.com>
Date: Thu, 8 Jan 2009 14:33:10 +0200
Subject: [PATCH 040/193] VRFB testing

Hardcoded rotation, defined in drivers/video/omap2/omapfb.h:omapfb_get_region_v/paddr()
---
 arch/arm/plat-omap/fb-vram.c             |  185 +++++++++++++++++++++++++++++-
 arch/arm/plat-omap/include/mach/omapfb.h |   12 ++
 drivers/video/omap2/omapfb-ioctl.c       |    4 +-
 drivers/video/omap2/omapfb-main.c        |   63 +++++++----
 drivers/video/omap2/omapfb-sysfs.c       |    4 +-
 drivers/video/omap2/omapfb.h             |   24 ++++-
 6 files changed, 263 insertions(+), 29 deletions(-)

diff --git a/arch/arm/plat-omap/fb-vram.c b/arch/arm/plat-omap/fb-vram.c
index 2994f8f..4765616 100644
--- a/arch/arm/plat-omap/fb-vram.c
+++ b/arch/arm/plat-omap/fb-vram.c
@@ -46,13 +46,33 @@
 /* Maximum size, in reality this is smaller if SRAM is partially locked. */
 #define OMAP2_SRAM_SIZE			0xa0000		/* 640k */
 
-#define REG_MAP_SIZE(_page_cnt)						\
+#define REG_MAP_SIZE(_page_cnt) \
 	((_page_cnt + (sizeof(unsigned long) * 8) - 1) / 8)
-#define REG_MAP_PTR(_rg, _page_nr)					\
+#define REG_MAP_PTR(_rg, _page_nr) \
 	(((_rg)->map) + (_page_nr) / (sizeof(unsigned long) * 8))
-#define REG_MAP_MASK(_page_nr)						\
+#define REG_MAP_MASK(_page_nr) \
 	(1 << ((_page_nr) & (sizeof(unsigned long) * 8 - 1)))
 
+/* VRFB */
+#define SMS_ROT_VIRT_BASE(context, rot) (0x70000000 \
+		| 0x4000000 * (context) \
+		| 0x1000000 * (rot))
+#define VRFB_SIZE              (2048 * 480 * 4)
+#define PAGE_WIDTH_EXP         5 /* Assuming SDRAM pagesize= 1024 */
+#define PAGE_HEIGHT_EXP        5 /* 1024 = 2^5 * 2^5 */
+#define SMS_IMAGEHEIGHT_OFFSET 16
+#define SMS_IMAGEWIDTH_OFFSET  0
+#define SMS_PH_OFFSET          8
+#define SMS_PW_OFFSET          4
+#define SMS_PS_OFFSET          0
+#define VRFB_LINE_LEN          2048
+
+#define OMAP_SMS_BASE          0x6C000000
+#define SMS_ROT_CONTROL(context)	(OMAP_SMS_BASE + 0x180 + 0x10 * context)
+#define SMS_ROT_SIZE(context)		(OMAP_SMS_BASE + 0x184 + 0x10 * context)
+#define SMS_ROT_PHYSICAL_BA(context)	(OMAP_SMS_BASE + 0x188 + 0x10 * context)
+
+
 #if defined(CONFIG_FB_OMAP2) || defined(CONFIG_FB_OMAP2_MODULE)
 
 /* postponed regions are used to temporarily store region information at boot
@@ -497,6 +517,165 @@ static __init int omap_vram_init(void)
 
 arch_initcall(omap_vram_init);
 
+
+
+
+
+
+/* VRFB */
+
+static inline u32 calc_vrfb_div(u32 img_side, u32 page_exp)
+{
+	u32 div = img_side / page_exp;
+	if ((div * page_exp) < img_side)
+		return div + 1;
+	else
+		return div;
+}
+
+int omap_vrfb_setup(int ctx, unsigned long paddr, u32 width, u32 height,
+		int bytespp)
+{
+	int page_width_exp, page_height_exp, pixel_size_exp;
+	int div;
+	u32 vrfb_width;
+	u32 vrfb_height;
+	u32 bytes_per_pixel = bytespp;
+
+	printk("omapfb_set_vrfb(%d, %lx, %dx%d, %d)\n", ctx, paddr,
+			width, height, bytespp);
+
+	page_width_exp = PAGE_WIDTH_EXP;
+	page_height_exp = PAGE_HEIGHT_EXP;
+	pixel_size_exp = bytes_per_pixel >> 1;
+
+	div = calc_vrfb_div(width * bytes_per_pixel, 1 << page_width_exp);
+	vrfb_width = (div * (1 << page_width_exp)) / bytes_per_pixel;
+
+	div = calc_vrfb_div(height, 1 << page_height_exp);
+	vrfb_height = div * (1 << page_height_exp);
+
+	printk("vrfb w %u, h %u\n", vrfb_width, vrfb_height);
+
+	omap_writel(paddr, SMS_ROT_PHYSICAL_BA(ctx));
+	omap_writel((vrfb_width << SMS_IMAGEWIDTH_OFFSET)
+			| (vrfb_height << SMS_IMAGEHEIGHT_OFFSET),
+			SMS_ROT_SIZE(ctx));
+
+	omap_writel(pixel_size_exp << SMS_PS_OFFSET
+			| page_width_exp  << SMS_PW_OFFSET
+			| page_height_exp << SMS_PH_OFFSET,
+			SMS_ROT_CONTROL(ctx));
+
+	//vrfb.xoffset = vrfb_width - width;
+	//vrfb.yoffset = vrfb_height - height;
+	return 0;
+}
+EXPORT_SYMBOL(omap_vrfb_setup);
+
+
+static int omapfb_reserve_vrfb_mem(int ctx, int rot,
+		u32 *paddr, void **vaddr)
+{
+	*paddr = SMS_ROT_VIRT_BASE(ctx, rot);
+	if (!request_mem_region(*paddr, VRFB_SIZE, "vrfb")) {
+		printk("request_mem_region failed\n");
+		return -ENOMEM;
+	}
+
+	*vaddr = ioremap(*paddr, VRFB_SIZE);
+	if(*vaddr == 0) {
+		release_mem_region(*paddr, VRFB_SIZE);
+		printk("ioremap failed\n");
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static unsigned ctx_map;
+
+#define VRFB_NUM_CTX 12
+
+void omap_vrfb_release_ctx(struct vrfb *vrfb)
+{
+	int rot;
+
+	ctx_map &= ~(1 << vrfb->context);
+
+	for (rot = 0; rot < 4; ++rot) {
+		if(vrfb->vaddr[rot]) {
+			iounmap(vrfb->vaddr[rot]);
+			vrfb->vaddr[rot] = NULL;
+		}
+
+		if(vrfb->paddr[rot]) {
+			release_mem_region(vrfb->paddr[rot], VRFB_SIZE);
+			vrfb->paddr[rot] = 0;
+		}
+	}
+
+	vrfb->context = -1;
+}
+EXPORT_SYMBOL(omap_vrfb_release_ctx);
+
+int omap_vrfb_create_ctx(struct vrfb *vrfb)
+{
+	int rot;
+	u32 paddr;
+	void* vaddr;
+	int ctx;
+
+	for (ctx = 0; ctx < VRFB_NUM_CTX; ++ctx)
+		if ((ctx_map & (1 << ctx)) == 0)
+			break;
+
+	if (ctx == VRFB_NUM_CTX) {
+		printk(KERN_ERR "no free vrfb contexts\n");
+		return -EBUSY;
+	}
+
+	printk("found free ctx %d\n", ctx);
+
+	ctx_map |= 1 << ctx;
+
+	memset(vrfb, 0, sizeof(*vrfb));
+
+	vrfb->context = ctx;
+
+	for (rot = 0; rot < 4; ++rot) {
+		int r;
+		r = omapfb_reserve_vrfb_mem(ctx, rot, &paddr, &vaddr);
+		if (r) {
+			printk(KERN_ERR "omapfb: failed to reserve VRFB "
+					"area for ctx %d, rotation %d\n",
+					ctx, rot * 90);
+			omap_vrfb_release_ctx(vrfb);
+			return r;
+		}
+
+		vrfb->paddr[rot] = paddr;
+		vrfb->vaddr[rot] = vaddr;
+
+		printk("VRFB %d/%d: %lx -> %p\n", ctx, rot*90,
+				vrfb->paddr[rot],
+				vrfb->vaddr[rot]);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(omap_vrfb_create_ctx);
+
+
+
+
+
+
+
+
+
+
+
 /* boottime vram alloc stuff */
 static u32 omapfb_sram_vram_start __initdata;
 static u32 omapfb_sram_vram_size __initdata;
diff --git a/arch/arm/plat-omap/include/mach/omapfb.h b/arch/arm/plat-omap/include/mach/omapfb.h
index 0800f92..c16ef7d 100644
--- a/arch/arm/plat-omap/include/mach/omapfb.h
+++ b/arch/arm/plat-omap/include/mach/omapfb.h
@@ -407,6 +407,18 @@ void *omap_vram_alloc(int mtype, size_t size, unsigned long *paddr);
 extern void omap2_set_sdram_vram(u32 size, u32 start);
 extern void omap2_set_sram_vram(u32 size, u32 start);
 
+struct vrfb
+{
+	int context;
+	void *vaddr[4];
+	unsigned long paddr[4];
+};
+
+int omap_vrfb_setup(int ctx, unsigned long paddr, u32 width, u32 height,
+		int bytespp);
+void omap_vrfb_release_ctx(struct vrfb *vrfb);
+int omap_vrfb_create_ctx(struct vrfb *vrfb);
+
 #endif /* __KERNEL__ */
 
 #endif /* __OMAPFB_H */
diff --git a/drivers/video/omap2/omapfb-ioctl.c b/drivers/video/omap2/omapfb-ioctl.c
index 0cb0370..c33b2a7 100644
--- a/drivers/video/omap2/omapfb-ioctl.c
+++ b/drivers/video/omap2/omapfb-ioctl.c
@@ -123,7 +123,7 @@ static int omapfb_setup_mem(struct fb_info *fbi, struct omapfb_mem_info *mi)
 {
 	struct omapfb_info *ofbi = FB2OFB(fbi);
 	struct omapfb2_device *fbdev = ofbi->fbdev;
-	struct omapfb_mem_region *rg;
+	struct omapfb2_mem_region *rg;
 	struct omap_display *display = fb2display(fbi);
 	int r, i;
 	size_t size;
@@ -186,7 +186,7 @@ static int omapfb_query_mem(struct fb_info *fbi, struct omapfb_mem_info *mi)
 {
 	struct omapfb_info *ofbi = FB2OFB(fbi);
 	struct omapfb2_device *fbdev = ofbi->fbdev;
-	struct omapfb_mem_region *rg;
+	struct omapfb2_mem_region *rg;
 
 	rg = &ofbi->region;
 	memset(mi, 0, sizeof(*mi));
diff --git a/drivers/video/omap2/omapfb-main.c b/drivers/video/omap2/omapfb-main.c
index d043c43..c7cc1aa 100644
--- a/drivers/video/omap2/omapfb-main.c
+++ b/drivers/video/omap2/omapfb-main.c
@@ -50,10 +50,13 @@ static void fill_fb(void *addr, struct fb_info *fbi)
 
 	const short w = var->xres_virtual;
 	const short h = var->yres_virtual;
+	int row_inc = 0;
 
 	int y, x;
 	u8 *p = addr;
 
+	row_inc = 2048 - w;
+
 	for (y = 0; y < h; y++) {
 		for (x = 0; x < w; x++) {
 			if (var->bits_per_pixel == 16) {
@@ -126,6 +129,8 @@ static void fill_fb(void *addr, struct fb_info *fbi)
 
 			p += var->bits_per_pixel >> 3;
 		}
+
+		p += (var->bits_per_pixel >> 3) * row_inc;
 	}
 }
 #endif
@@ -185,15 +190,15 @@ void set_fb_fix(struct fb_info *fbi)
 {
 	struct fb_fix_screeninfo *fix = &fbi->fix;
 	struct fb_var_screeninfo *var = &fbi->var;
-	struct omapfb_mem_region *rg = &FB2OFB(fbi)->region;
+	struct omapfb2_mem_region *rg = &FB2OFB(fbi)->region;
 
 	DBG("set_fb_fix\n");
 
 	/* used by open/write in fbmem.c */
-	fbi->screen_base        = (char __iomem *)rg->vaddr;
+	fbi->screen_base        = (char __iomem *)omapfb_get_region_vaddr(rg);
 
 	/* used by mmap in fbmem.c */
-	fix->smem_start         = rg->paddr;
+	fix->smem_start         = omapfb_get_region_paddr(rg);
 	fix->smem_len           = rg->size;
 
 	fix->type = FB_TYPE_PACKED_PIXELS;
@@ -223,6 +228,11 @@ void set_fb_fix(struct fb_info *fbi)
 
 	fix->xpanstep = 1;
 	fix->ypanstep = 1;
+
+	if (rg->_paddr)
+		omap_vrfb_setup(rg->vrfb.context, rg->_paddr,
+				var->xres_virtual, var->yres_virtual,
+				var->bits_per_pixel / 8);
 }
 
 /* check new var and possibly modify it to be ok */
@@ -454,8 +464,14 @@ int omapfb_setup_overlay(struct fb_info *fbi, struct omap_overlay *ovl,
 	offset = ((var->yoffset * var->xres_virtual +
 				var->xoffset) * var->bits_per_pixel) >> 3;
 
-	data_start_p = ofbi->region.paddr + offset;
-	data_start_v = ofbi->region.vaddr + offset;
+	data_start_p = omapfb_get_region_paddr(&ofbi->region);
+	data_start_v = omapfb_get_region_vaddr(&ofbi->region);
+
+	data_start_p = ofbi->region.vrfb.paddr[0];
+	data_start_v = ofbi->region.vrfb.vaddr[0];
+
+	data_start_p += offset;
+	data_start_v += offset;
 
 	mode = fb_mode_to_dss_mode(var);
 
@@ -466,7 +482,7 @@ int omapfb_setup_overlay(struct fb_info *fbi, struct omap_overlay *ovl,
 
 	r = ovl->setup_input(ovl,
 			data_start_p, data_start_v,
-			var->xres_virtual,
+			2048, //var->xres_virtual,
 			var->xres, var->yres,
 			mode);
 
@@ -627,7 +643,7 @@ static struct vm_operations_struct mmap_user_ops = {
 static int omapfb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)
 {
 	struct omapfb_info *ofbi = FB2OFB(fbi);
-	struct omapfb_mem_region *rg = &ofbi->region;
+	struct omapfb2_mem_region *rg = &ofbi->region;
 	unsigned long off;
 	unsigned long start;
 	u32 len;
@@ -638,7 +654,7 @@ static int omapfb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)
 		return -EINVAL;
 	off = vma->vm_pgoff << PAGE_SHIFT;
 
-	start = rg->paddr;
+	start = omapfb_get_region_paddr(rg);
 	len = rg->size;
 	if (off >= len)
 		return -EINVAL;
@@ -828,16 +844,18 @@ static struct fb_ops omapfb_ops = {
 static void omapfb_free_fbmem(struct omapfb2_device *fbdev, int fbnum)
 {
 	struct omapfb_info *ofbi = FB2OFB(fbdev->fbs[fbnum]);
-	struct omapfb_mem_region *rg;
+	struct omapfb2_mem_region *rg;
 
 	rg = &ofbi->region;
 
-	if (rg->paddr)
-		if (omap_vram_free(rg->paddr, rg->vaddr, rg->size))
+	if (rg->_paddr)
+		if (omap_vram_free(rg->_paddr, rg->_vaddr, rg->size))
 			dev_err(fbdev->dev, "VRAM FREE failed\n");
 
-	rg->vaddr = NULL;
-	rg->paddr = 0;
+	omap_vrfb_release_ctx(&rg->vrfb);
+
+	rg->_vaddr = NULL;
+	rg->_paddr = 0;
 	rg->alloc = 0;
 	rg->size = 0;
 }
@@ -858,7 +876,7 @@ static int omapfb_alloc_fbmem(struct omapfb2_device *fbdev, int fbnum,
 		unsigned long size)
 {
 	struct omapfb_info *ofbi;
-	struct omapfb_mem_region *rg;
+	struct omapfb2_mem_region *rg;
 	unsigned long paddr;
 	void *vaddr;
 
@@ -880,8 +898,11 @@ static int omapfb_alloc_fbmem(struct omapfb2_device *fbdev, int fbnum,
 		return -ENOMEM;
 	}
 
-	rg->paddr = paddr;
-	rg->vaddr = vaddr;
+	if (omap_vrfb_create_ctx(&rg->vrfb))
+		printk("vrfb create ctx failed\n");
+
+	rg->_paddr = paddr;
+	rg->_vaddr = vaddr;
 	rg->size = size;
 	rg->alloc = 1;
 
@@ -892,7 +913,7 @@ int omapfb_realloc_fbmem(struct omapfb2_device *fbdev, int fbnum,
 		unsigned long size)
 {
 	struct omapfb_info *ofbi = FB2OFB(fbdev->fbs[fbnum]);
-	struct omapfb_mem_region *rg = &ofbi->region;
+	struct omapfb2_mem_region *rg = &ofbi->region;
 	unsigned old_size = rg->size;
 	int r;
 
@@ -997,13 +1018,13 @@ static int omapfb_allocate_all_fbs(struct omapfb2_device *fbdev)
 
 	for (i = 0; i < fbdev->num_fbs; i++) {
 		struct omapfb_info *ofbi = FB2OFB(fbdev->fbs[i]);
-		struct omapfb_mem_region *rg;
+		struct omapfb2_mem_region *rg;
 		rg = &ofbi->region;
 
 		DBG("region%d phys %08x virt %p size=%lu\n",
 				i,
-				rg->paddr,
-				rg->vaddr,
+				rg->_paddr,
+				rg->_vaddr,
 				rg->size);
 	}
 
@@ -1057,7 +1078,7 @@ static int fbinfo_init(struct omapfb2_device *fbdev, struct fb_info *fbi)
 
 #ifdef DEBUG
 	if (omapfb_debug)
-		fill_fb(FB2OFB(fbi)->region.vaddr, fbi);
+		fill_fb(omapfb_get_region_vaddr(&FB2OFB(fbi)->region), fbi);
 #endif
 err:
 	return r;
diff --git a/drivers/video/omap2/omapfb-sysfs.c b/drivers/video/omap2/omapfb-sysfs.c
index 0e153b9..aff67f6 100644
--- a/drivers/video/omap2/omapfb-sysfs.c
+++ b/drivers/video/omap2/omapfb-sysfs.c
@@ -122,13 +122,13 @@ static ssize_t show_framebuffers(struct device *dev,
 
 	for (i = 0; i < fbdev->num_fbs; i++) {
 		struct omapfb_info *ofbi = FB2OFB(fbdev->fbs[i]);
-		struct omapfb_mem_region *rg;
+		struct omapfb2_mem_region *rg;
 
 		rg = &ofbi->region;
 
 		l += snprintf(buf + l, size - l, "%d p:%08x v:%p size:%lu t:",
 				ofbi->id,
-				rg->paddr, rg->vaddr, rg->size);
+				rg->_paddr, rg->_vaddr, rg->size);
 
 		if (ofbi->num_overlays == 0)
 			l += snprintf(buf + l, size - l, "none");
diff --git a/drivers/video/omap2/omapfb.h b/drivers/video/omap2/omapfb.h
index 9ba4f1b..0f5257c 100644
--- a/drivers/video/omap2/omapfb.h
+++ b/drivers/video/omap2/omapfb.h
@@ -41,10 +41,32 @@ extern unsigned int omapfb_debug;
 /* max number of overlays to which a framebuffer data can be direct */
 #define OMAPFB_MAX_OVL_PER_FB 3
 
+struct omapfb2_mem_region {
+	u32		_paddr;
+	void __iomem	*_vaddr;
+	struct vrfb	vrfb;
+	unsigned long	size;
+	u8		type;		/* OMAPFB_PLANE_MEM_* */
+	unsigned	alloc:1;	/* allocated by the driver */
+	unsigned	map:1;		/* kernel mapped by the driver */
+};
+
+static inline u32 omapfb_get_region_paddr(struct omapfb2_mem_region *region)
+{
+	return region->vrfb.paddr[0]; // XXX always return 180 rotated
+//	return region->_paddr;
+}
+
+static inline void *omapfb_get_region_vaddr(struct omapfb2_mem_region *region)
+{
+	return region->vrfb.vaddr[0]; // XXX always return 180 rotated
+	//return region->_vaddr;
+}
+
 /* appended to fb_info */
 struct omapfb_info {
 	int id;
-	struct omapfb_mem_region region;
+	struct omapfb2_mem_region region;
 	atomic_t map_count;
 	int num_overlays;
 	struct omap_overlay *overlays[OMAPFB_MAX_OVL_PER_FB];
-- 
1.5.6

