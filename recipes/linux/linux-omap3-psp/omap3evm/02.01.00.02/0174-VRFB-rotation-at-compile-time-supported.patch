From b67d8008b4ce84d742eac15652da47f7a6004a2c Mon Sep 17 00:00:00 2001
From: Vaibhav Hiremath <hvaibhav@ti.com>
Date: Tue, 13 Jan 2009 19:31:44 +0530
Subject: [PATCH 174/304] VRFB rotation at compile time supported

VRFB rotation at compile time supported under this commit.
---
 arch/arm/plat-omap/Makefile              |    2 +-
 arch/arm/plat-omap/fb-vram.c             |  182 ------------------------------
 arch/arm/plat-omap/fb-vrfb.c             |  159 ++++++++++++++++++++++++++
 arch/arm/plat-omap/include/mach/omapfb.h |   10 ++-
 drivers/video/omap2/omapfb-main.c        |   77 ++++++++++++-
 5 files changed, 242 insertions(+), 188 deletions(-)
 create mode 100644 arch/arm/plat-omap/fb-vrfb.c

diff --git a/arch/arm/plat-omap/Makefile b/arch/arm/plat-omap/Makefile
index 95ce50a..813a151 100644
--- a/arch/arm/plat-omap/Makefile
+++ b/arch/arm/plat-omap/Makefile
@@ -4,7 +4,7 @@
 
 # Common support
 obj-y := common.o sram.o clock.o devices.o dma.o mux.o gpio.o \
-	 usb.o fb.o fb-vram.o io.o
+	 usb.o fb.o fb-vram.o fb-vrfb.o io.o
 obj-m :=
 obj-n :=
 obj-  :=
diff --git a/arch/arm/plat-omap/fb-vram.c b/arch/arm/plat-omap/fb-vram.c
index 843ecdf..d5fff3b 100644
--- a/arch/arm/plat-omap/fb-vram.c
+++ b/arch/arm/plat-omap/fb-vram.c
@@ -53,27 +53,6 @@
 #define REG_MAP_MASK(_page_nr) \
 	(1 << ((_page_nr) & (sizeof(unsigned long) * 8 - 1)))
 
-/* VRFB */
-#define SMS_ROT_VIRT_BASE(context, rot) (0x70000000 \
-		| 0x4000000 * (context) \
-		| 0x1000000 * (rot))
-//#define VRFB_SIZE              (2048 * 480 * 4)
-#define VRFB_SIZE              (2048 * 640 * 4) // XXX this should be calculated
-#define PAGE_WIDTH_EXP         5 /* Assuming SDRAM pagesize= 1024 */
-#define PAGE_HEIGHT_EXP        5 /* 1024 = 2^5 * 2^5 */
-#define SMS_IMAGEHEIGHT_OFFSET 16
-#define SMS_IMAGEWIDTH_OFFSET  0
-#define SMS_PH_OFFSET          8
-#define SMS_PW_OFFSET          4
-#define SMS_PS_OFFSET          0
-#define VRFB_LINE_LEN          2048
-
-#define OMAP_SMS_BASE          0x6C000000
-#define SMS_ROT_CONTROL(context)	(OMAP_SMS_BASE + 0x180 + 0x10 * context)
-#define SMS_ROT_SIZE(context)		(OMAP_SMS_BASE + 0x184 + 0x10 * context)
-#define SMS_ROT_PHYSICAL_BA(context)	(OMAP_SMS_BASE + 0x188 + 0x10 * context)
-
-
 #if defined(CONFIG_FB_OMAP2) || defined(CONFIG_FB_OMAP2_MODULE)
 
 /* postponed regions are used to temporarily store region information at boot
@@ -518,167 +497,6 @@ static __init int omap_vram_init(void)
 
 arch_initcall(omap_vram_init);
 
-
-
-
-
-
-/* VRFB */
-
-static inline u32 calc_vrfb_div(u32 img_side, u32 page_exp)
-{
-	u32 div = img_side / page_exp;
-	if ((div * page_exp) < img_side)
-		return div + 1;
-	else
-		return div;
-}
-
-int omap_vrfb_setup(int ctx, unsigned long paddr, u32 width, u32 height,
-		int bytespp)
-{
-	int page_width_exp, page_height_exp, pixel_size_exp;
-	int div;
-	u32 vrfb_width;
-	u32 vrfb_height;
-	u32 bytes_per_pixel = bytespp;
-
-	printk("omapfb_set_vrfb(%d, %lx, %dx%d, %d)\n", ctx, paddr,
-			width, height, bytespp);
-
-	page_width_exp = PAGE_WIDTH_EXP;
-	page_height_exp = PAGE_HEIGHT_EXP;
-	pixel_size_exp = bytes_per_pixel >> 1;
-
-	div = calc_vrfb_div(width * bytes_per_pixel, 1 << page_width_exp);
-	vrfb_width = (div * (1 << page_width_exp)) / bytes_per_pixel;
-
-	div = calc_vrfb_div(height, 1 << page_height_exp);
-	vrfb_height = div * (1 << page_height_exp);
-
-	printk("vrfb w %u, h %u\n", vrfb_width, vrfb_height);
-
-	omap_writel(paddr, SMS_ROT_PHYSICAL_BA(ctx));
-	omap_writel((vrfb_width << SMS_IMAGEWIDTH_OFFSET)
-			| (vrfb_height << SMS_IMAGEHEIGHT_OFFSET),
-			SMS_ROT_SIZE(ctx));
-
-	omap_writel(pixel_size_exp << SMS_PS_OFFSET
-			| page_width_exp  << SMS_PW_OFFSET
-			| page_height_exp << SMS_PH_OFFSET,
-			SMS_ROT_CONTROL(ctx));
-
-	printk("vrfb offset %d, %d\n", vrfb_width - width, vrfb_height - height);
-
-	//vrfb.xoffset = vrfb_width - width;
-	//vrfb.yoffset = vrfb_height - height;
-	return 0;
-}
-EXPORT_SYMBOL(omap_vrfb_setup);
-
-
-static int omapfb_reserve_vrfb_mem(int ctx, int rot,
-		u32 *paddr, void **vaddr)
-{
-	*paddr = SMS_ROT_VIRT_BASE(ctx, rot);
-	if (!request_mem_region(*paddr, VRFB_SIZE, "vrfb")) {
-		printk("request_mem_region failed\n");
-		return -ENOMEM;
-	}
-
-	*vaddr = ioremap(*paddr, VRFB_SIZE);
-	if(*vaddr == 0) {
-		release_mem_region(*paddr, VRFB_SIZE);
-		printk("ioremap failed\n");
-		return -ENOMEM;
-	}
-
-	return 0;
-}
-
-static unsigned ctx_map;
-
-#define VRFB_NUM_CTX 12
-
-void omap_vrfb_release_ctx(struct vrfb *vrfb)
-{
-	int rot;
-
-	ctx_map &= ~(1 << vrfb->context);
-
-	for (rot = 0; rot < 4; ++rot) {
-		if(vrfb->vaddr[rot]) {
-			iounmap(vrfb->vaddr[rot]);
-			vrfb->vaddr[rot] = NULL;
-		}
-
-		if(vrfb->paddr[rot]) {
-			release_mem_region(vrfb->paddr[rot], VRFB_SIZE);
-			vrfb->paddr[rot] = 0;
-		}
-	}
-
-	vrfb->context = -1;
-}
-EXPORT_SYMBOL(omap_vrfb_release_ctx);
-
-int omap_vrfb_create_ctx(struct vrfb *vrfb)
-{
-	int rot;
-	u32 paddr;
-	void* vaddr;
-	int ctx;
-
-	for (ctx = 0; ctx < VRFB_NUM_CTX; ++ctx)
-		if ((ctx_map & (1 << ctx)) == 0)
-			break;
-
-	if (ctx == VRFB_NUM_CTX) {
-		printk(KERN_ERR "no free vrfb contexts\n");
-		return -EBUSY;
-	}
-
-	printk("found free ctx %d\n", ctx);
-
-	ctx_map |= 1 << ctx;
-
-	memset(vrfb, 0, sizeof(*vrfb));
-
-	vrfb->context = ctx;
-
-	for (rot = 0; rot < 4; ++rot) {
-		int r;
-		r = omapfb_reserve_vrfb_mem(ctx, rot, &paddr, &vaddr);
-		if (r) {
-			printk(KERN_ERR "omapfb: failed to reserve VRFB "
-					"area for ctx %d, rotation %d\n",
-					ctx, rot * 90);
-			omap_vrfb_release_ctx(vrfb);
-			return r;
-		}
-
-		vrfb->paddr[rot] = paddr;
-		vrfb->vaddr[rot] = vaddr;
-
-		printk("VRFB %d/%d: %lx -> %p\n", ctx, rot*90,
-				vrfb->paddr[rot],
-				vrfb->vaddr[rot]);
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL(omap_vrfb_create_ctx);
-
-
-
-
-
-
-
-
-
-
-
 /* boottime vram alloc stuff */
 static u32 omapfb_sram_vram_start __initdata;
 static u32 omapfb_sram_vram_size __initdata;
diff --git a/arch/arm/plat-omap/fb-vrfb.c b/arch/arm/plat-omap/fb-vrfb.c
new file mode 100644
index 0000000..741ad05
--- /dev/null
+++ b/arch/arm/plat-omap/fb-vrfb.c
@@ -0,0 +1,159 @@
+#include <linux/kernel.h>
+#include <mach/omapfb.h>
+
+#ifdef DEBUG
+#define DBG(format, ...) printk(KERN_DEBUG "VRFB: " format, ## __VA_ARGS__)
+#else
+#define DBG(format, ...)
+#endif
+
+#define SMS_ROT_VIRT_BASE(context, rot) \
+		(((context >= 4) ? 0xE0000000 : 0x70000000) \
+		| 0x4000000 * (context) \
+		| 0x1000000 * (rot))
+
+#define PAGE_WIDTH_EXP         5 /* Assuming SDRAM pagesize= 1024 */
+#define PAGE_HEIGHT_EXP        5 /* 1024 = 2^5 * 2^5 */
+#define SMS_IMAGEHEIGHT_OFFSET 16
+#define SMS_IMAGEWIDTH_OFFSET  0
+#define SMS_PH_OFFSET          8
+#define SMS_PW_OFFSET          4
+#define SMS_PS_OFFSET          0
+#define VRFB_LINE_LEN          2048
+
+#define OMAP_SMS_BASE          0x6C000000
+#define SMS_ROT_CONTROL(context)	(OMAP_SMS_BASE + 0x180 + 0x10 * context)
+#define SMS_ROT_SIZE(context)		(OMAP_SMS_BASE + 0x184 + 0x10 * context)
+#define SMS_ROT_PHYSICAL_BA(context)	(OMAP_SMS_BASE + 0x188 + 0x10 * context)
+
+#define VRFB_NUM_CTXS 12
+/* bitmap of reserved contexts */
+static unsigned ctx_map;
+
+static inline u32 calc_vrfb_div(u32 img_side, u32 page_exp)
+{
+	u32 div = img_side / page_exp;
+	if ((div * page_exp) < img_side)
+		return div + 1;
+	else
+		return div;
+}
+
+void omap_vrfb_setup(int ctx, unsigned long paddr, u32 width, u32 height,
+		int bytespp)
+{
+	int page_width_exp, page_height_exp, pixel_size_exp;
+	int div;
+	u32 vrfb_width;
+	u32 vrfb_height;
+	u32 bytes_per_pixel = bytespp;
+
+	DBG("omapfb_set_vrfb(%d, %lx, %dx%d, %d)\n", ctx, paddr,
+			width, height, bytespp);
+
+	page_width_exp = PAGE_WIDTH_EXP;
+	page_height_exp = PAGE_HEIGHT_EXP;
+	pixel_size_exp = bytes_per_pixel >> 1;
+
+	div = calc_vrfb_div(width * bytes_per_pixel, 1 << page_width_exp);
+	vrfb_width = (div * (1 << page_width_exp)) / bytes_per_pixel;
+
+	div = calc_vrfb_div(height, 1 << page_height_exp);
+	vrfb_height = div * (1 << page_height_exp);
+
+	DBG("vrfb w %u, h %u\n", vrfb_width, vrfb_height);
+
+	omap_writel(paddr, SMS_ROT_PHYSICAL_BA(ctx));
+	omap_writel((vrfb_width << SMS_IMAGEWIDTH_OFFSET)
+			| (vrfb_height << SMS_IMAGEHEIGHT_OFFSET),
+			SMS_ROT_SIZE(ctx));
+
+	omap_writel(pixel_size_exp << SMS_PS_OFFSET
+			| page_width_exp  << SMS_PW_OFFSET
+			| page_height_exp << SMS_PH_OFFSET,
+			SMS_ROT_CONTROL(ctx));
+
+	DBG("vrfb offset %d, %d\n", vrfb_width - width, vrfb_height - height);
+
+}
+EXPORT_SYMBOL(omap_vrfb_setup);
+
+static int omapfb_request_vrfb_mem(int ctx, int rot,
+		u32 *paddr)
+{
+	*paddr = SMS_ROT_VIRT_BASE(ctx, rot);
+	if (!request_mem_region(*paddr, VRFB_SIZE, "vrfb")) {
+		printk(KERN_ERR "vrfb: request_mem_region failed\n");
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+void omap_vrfb_release_ctx(struct vrfb *vrfb)
+{
+	int rot;
+
+	DBG("release ctx %d\n", vrfb->context);
+
+	ctx_map &= ~(1 << vrfb->context);
+
+	for (rot = 0; rot < 4; ++rot) {
+		if(vrfb->vaddr[rot]) {
+			iounmap(vrfb->vaddr[rot]);
+			vrfb->vaddr[rot] = NULL;
+		}
+
+		if(vrfb->paddr[rot]) {
+			release_mem_region(vrfb->paddr[rot], VRFB_SIZE);
+			vrfb->paddr[rot] = 0;
+		}
+	}
+
+	vrfb->context = -1;
+}
+EXPORT_SYMBOL(omap_vrfb_release_ctx);
+
+int omap_vrfb_create_ctx(struct vrfb *vrfb)
+{
+	u32 paddr;
+	int ctx, rot;
+
+	DBG("create ctx\n");
+
+	for (ctx = 0; ctx < VRFB_NUM_CTXS; ++ctx)
+		if ((ctx_map & (1 << ctx)) == 0)
+			break;
+
+	if (ctx == VRFB_NUM_CTXS) {
+		printk(KERN_ERR "vrfb: no free contexts\n");
+		return -EBUSY;
+	}
+
+	DBG("found free ctx %d\n", ctx);
+
+	ctx_map |= 1 << ctx;
+
+	memset(vrfb, 0, sizeof(*vrfb));
+
+	vrfb->context = ctx;
+
+	for (rot = 0; rot < 4; ++rot) {
+		int r;
+		r = omapfb_request_vrfb_mem(ctx, rot, &paddr);
+		if (r) {
+			printk(KERN_ERR "vrfb: failed to reserve VRFB "
+					"area for ctx %d, rotation %d\n",
+					ctx, rot * 90);
+			omap_vrfb_release_ctx(vrfb);
+			return r;
+		}
+		vrfb->paddr[rot] = paddr;
+		DBG("VRFB %d/%d: %lx\n", ctx, rot*90,
+				vrfb->paddr[rot]);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(omap_vrfb_create_ctx);
+
diff --git a/arch/arm/plat-omap/include/mach/omapfb.h b/arch/arm/plat-omap/include/mach/omapfb.h
index c16ef7d..c26d5db 100644
--- a/arch/arm/plat-omap/include/mach/omapfb.h
+++ b/arch/arm/plat-omap/include/mach/omapfb.h
@@ -407,6 +407,7 @@ void *omap_vram_alloc(int mtype, size_t size, unsigned long *paddr);
 extern void omap2_set_sdram_vram(u32 size, u32 start);
 extern void omap2_set_sram_vram(u32 size, u32 start);
 
+/* in arch/arm/plat-omap/fb-vrfb */
 struct vrfb
 {
 	int context;
@@ -414,7 +415,14 @@ struct vrfb
 	unsigned long paddr[4];
 };
 
-int omap_vrfb_setup(int ctx, unsigned long paddr, u32 width, u32 height,
+/*
+ * In rotation mode vrfb line length is fixed that is 2048 pixels.
+ * So allocating buffer size of 2048 * 720 * 4. 720 is max y resolution and
+ * 4 is for 32bpps mode to support 720P resolution.
+ */
+#define VRFB_SIZE (2048 * 720 * 4)
+
+void omap_vrfb_setup(int ctx, unsigned long paddr, u32 width, u32 height,
 		int bytespp);
 void omap_vrfb_release_ctx(struct vrfb *vrfb);
 int omap_vrfb_create_ctx(struct vrfb *vrfb);
diff --git a/drivers/video/omap2/omapfb-main.c b/drivers/video/omap2/omapfb-main.c
index 047ccdc..d03418a 100644
--- a/drivers/video/omap2/omapfb-main.c
+++ b/drivers/video/omap2/omapfb-main.c
@@ -35,6 +35,8 @@
 
 #define MODULE_NAME     "omapfb"
 
+#define omap_rotation_index(deg) (deg/90)
+
 static char *def_mode;
 static char *def_vram;
 static int def_rotate = -1;
@@ -947,6 +949,7 @@ static int omapfb_alloc_fbmem(struct omapfb2_device *fbdev, int fbnum,
 	struct omapfb2_mem_region *rg;
 	unsigned long paddr;
 	void *vaddr;
+	int rot, r;
 
 	size = PAGE_ALIGN(size);
 
@@ -966,9 +969,25 @@ static int omapfb_alloc_fbmem(struct omapfb2_device *fbdev, int fbnum,
 		return -ENOMEM;
 	}
 
-	if (omap_vrfb_create_ctx(&rg->vrfb))
-		printk("vrfb create ctx failed\n");
-
+	r = omap_vrfb_create_ctx(&rg->vrfb);
+	if (r) {
+		dev_err(fbdev->dev, "vrfb create ctx failed\n");
+		return r;
+	}
+	for (rot = 0; rot < 4; ++rot) {
+		if (rg->vrfb.paddr[rot]) {
+			rg->vrfb.vaddr[rot] = ioremap(rg->vrfb.paddr[rot],
+					VRFB_SIZE);
+			if (rg->vrfb.vaddr[rot] == NULL) {
+				omap_vrfb_release_ctx(&rg->vrfb);
+				dev_err(fbdev->dev, "failed to map VRFB\n");
+				return -ENOMEM;
+			}
+			DBG("VRFB %d/%d: %lx -> %p\n", rg->vrfb.context, rot*90,
+					rg->vrfb.paddr[rot],
+					rg->vrfb.vaddr[rot]);
+		}
+	}
 	rg->_paddr = paddr;
 	rg->_vaddr = vaddr;
 	rg->size = size;
@@ -1030,6 +1049,8 @@ static int omapfb_alloc_fbmem_display(struct omapfb2_device *fbdev, int fbnum,
 
 	if (def_vram)
 		size = def_vram;
+	else if (def_rotate >= 0)
+		size = VRFB_SIZE;
 	else
 		size = display->panel->timings.x_res *
 			display->panel->timings.y_res *
@@ -1116,7 +1137,7 @@ static int fbinfo_init(struct omapfb2_device *fbdev, struct fb_info *fbi)
 
 	var->nonstd = 0;
 
-	printk("ROTATE %d\n", def_rotate);
+	DBG("default rotation %d\n", def_rotate);
 
 	ofbi->rotation = def_rotate;
 
@@ -1338,6 +1359,43 @@ int omapfb_mode_to_timings(const char *mode_str,
 	}
 }
 
+#ifndef MODULE
+int omapfb_parse_cmdline(char *options)
+{
+	char *this_opt;
+
+	DBG("omap2fb: Options \"%s\"\n", options);
+
+	if (!options || !*options)
+		return 0;
+
+	while ((this_opt = strsep(&options, ",")) != NULL) {
+		if (!*this_opt)
+			continue;
+
+		if (!strncmp(this_opt, "rotation=", 9)) {
+			int deg = simple_strtoul(this_opt + 9, NULL, 0);
+
+			if (deg == 0 || deg == 90 || deg == 180 || deg == 270)
+				def_rotate = omap_rotation_index(deg);
+			else
+				def_rotate = -1;
+
+			printk(KERN_INFO "omap2fb: Rotation %s\n",
+				(def_rotate == -1) ?
+				"none (supported: \"rotation=[0|90|180|270]\")":
+				this_opt);
+
+		} else if (!strcmp(this_opt, "vram=")) {
+			def_vram = this_opt + 5;
+		} else if (!strcmp(this_opt, "mode=")) {
+			def_mode = this_opt + 5;
+		}
+	}
+	return 0;
+}
+#endif
+
 static int omapfb_probe(struct platform_device *pdev)
 {
 	struct omapfb2_device *fbdev = NULL;
@@ -1345,6 +1403,9 @@ static int omapfb_probe(struct platform_device *pdev)
 	int i, t;
 	struct omap_overlay *ovl;
 	struct omap_display *def_display;
+#ifndef MODULE
+	char *option;
+#endif
 
 	DBG("omapfb_probe\n");
 
@@ -1365,6 +1426,14 @@ static int omapfb_probe(struct platform_device *pdev)
 	fbdev->dev = &pdev->dev;
 	platform_set_drvdata(pdev, fbdev);
 
+#ifndef MODULE
+	/* Parse the command line options */
+	if (fb_get_options("omap2fb", &option)) {
+		return -ENODEV;
+	}
+	omapfb_parse_cmdline(option);
+#endif /* MODULE */
+
 	fbdev->num_displays = 0;
 	t = omap_dss_get_num_displays();
 	for (i = 0; i < t; i++) {
-- 
1.5.6

